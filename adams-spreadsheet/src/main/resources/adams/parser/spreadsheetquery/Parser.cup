/*
 * STANDARD ML OF NEW JERSEY COPYRIGHT NOTICE, LICENSE AND DISCLAIMER.
 *
 * Copyright (c) 1989-1998 by Lucent Technologies
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted, provided
 * that the above copyright notice appear in all copies and that both the
 * copyright notice and this permission notice and warranty disclaimer appear
 * in supporting documentation, and that the name of Lucent Technologies, Bell
 * Labs or any Lucent entity not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior permission.
 *
 * Lucent disclaims all warranties with regard to this software, including all
 * implied warranties of merchantability and fitness. In no event shall Lucent
 * be liable for any special, indirect or consequential damages or any damages
 * whatsoever resulting from loss of use, data or profits, whether in an action
 * of contract, negligence or other tortious action, arising out of or in
 * connection with the use or performance of this software.
 *
 * Taken from this URL:
 * http://www.smlnj.org/license.html
 *
 * This license is compatible with the GNU GPL (see section "Standard ML of New
 * Jersey Copyright License"):
 * http://www.gnu.org/licenses/license-list.html#StandardMLofNJ
 */

/*
 * Copyright 1996-1999 by Scott Hudson, Frank Flannery, C. Scott Ananian
 */

package adams.parser.spreadsheetquery;

import java_cup.runtime.*;

import java.io.*;
import java.util.*;

import adams.core.*;
import adams.core.base.*;
import adams.core.logging.*;
import adams.data.conversion.*;
import adams.data.spreadsheet.*;
import adams.data.spreadsheet.Cell.ContentType;
import adams.data.spreadsheet.columnfinder.*;
import adams.data.spreadsheet.rowfinder.*;
import adams.flow.core.*;
import adams.flow.control.*;
import adams.flow.transformer.*;
import adams.flow.transformer.SpreadSheetAggregate.Aggregate;
import adams.parser.spreadsheetquery.ParserHelper;

/**
 * A parser for spreadsheet queries.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 */

parser code {:
  /** the logger. */
  private final static Logger LOGGER = LoggingHelper.getConsoleLogger(Parser.class);
  
  /** variable - value relation. */
  protected HashMap m_Symbols = new HashMap();

  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /**
   * Returns the logger.
   *
   * @return the variable-value relation
   */
  public Logger getLogger() {
    return LOGGER;
  }

  /**
   * Sets the variable - value relation to use.
   *
   * @param value the variable-value relation
   */
  public void setSymbols(HashMap value) {
    m_Symbols = value;
    m_Helper.setSymbols(value);
  }

  /**
   * Returns the current variable - value relation in use.
   *
   * @return the variable-value relation
   */
  public HashMap getSymbols() {
    return m_Symbols;
  }

  /**
   * Sets the spreadsheet to use.
   *
   * @param value the spreadsheet
   */
  public void setSheet(SpreadSheet value) {
    m_Helper.setSheet(value);
  }

  /**
   * Returns the current spreadsheet in use.
   *
   * @return the spreadsheet
   */
  public SpreadSheet getSheet() {
    return m_Helper.getSheet();
  }

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }

  /**
   * Returns the partial flow that was generated to process the spreadsheet.
   *
   * @return the partial flow, null if none available
   */
  public SubProcess getSubProcess() {
    return m_Helper.getSubProcess();
  }

  /**
   * Returns the result of the evaluation.
   *
   * @return the result
   */
  public SpreadSheet getResult() {
    return m_Helper.getResult();
  }
:}

terminal SELECT, UPDATE, DELETE, WHERE, SET, ORDER, BY, IS, NULL, REGEXP, AS, LIMIT;
terminal GROUP, HAVING, COUNT, MIN, MAX, RANGE, AVERAGE, MEDIAN, STDEV, STDEVP, SUM, IQR;
terminal PARSE, CELLTYPE;
terminal COMMA, LPAREN, RPAREN;
terminal STAR, PERCENT;
terminal LT, LE, GT, GE, EQ, NOT_EQ, NOT, AND, OR;
terminal ASC, DESC;
terminal Double NUMBER;
terminal String COLUMN;
terminal String STRING;

non terminal expr_list, expr_part;
non terminal select, update, delete;
non terminal col_list, col;
non terminal order_list, order;
non terminal upd_list, upd;
non terminal cond_list;
non terminal agg_list, agg;
non terminal groupby_list, groupby;
non terminal int[] cond;
non terminal Object value;
non terminal limit;

precedence left AND, OR;
precedence left LT, LE, GT, GE, EQ, NOT_EQ;
precedence left LPAREN, RPAREN;
precedence left NOT;

expr_list ::= expr_list expr_part | expr_part;

expr_part ::= select | update | delete;

select    ::=   SELECT col_list
                {: 
                  parser.getHelper().select(); 
                :}
              | SELECT col_list limit
                {: 
                  parser.getHelper().select(); 
                :}
              | SELECT col_list WHERE cond_list
                {: 
                  parser.getHelper().select(); 
                :}
              | SELECT col_list WHERE cond_list limit
                {: 
                  parser.getHelper().select(); 
                :}
              | SELECT col_list ORDER BY order_list
                {: 
                  parser.getHelper().select(); 
                :}
              | SELECT col_list ORDER BY order_list limit
                {: 
                  parser.getHelper().select(); 
                :}
              | SELECT col_list WHERE cond_list ORDER BY order_list
                {: 
                  parser.getHelper().select(); 
                :}
              | SELECT col_list WHERE cond_list ORDER BY order_list limit
                {: 
                  parser.getHelper().select(); 
                :}
              | SELECT agg_list
                {: 
                  parser.getHelper().aggregate(); 
                :}
              | SELECT agg_list HAVING cond_list
                {: 
                  parser.getHelper().aggregate(); 
                :}
              | SELECT agg_list GROUP BY groupby_list
                {: 
                  parser.getHelper().aggregate(); 
                :}
              | SELECT agg_list GROUP BY groupby_list HAVING cond_list
                {: 
                  parser.getHelper().aggregate(); 
                :}
              ;

update    ::=   UPDATE SET upd_list
                {: 
                  parser.getHelper().update(); 
                :}
              | UPDATE SET upd_list WHERE cond_list
                {: 
                  parser.getHelper().update(); 
                :}
              ;

delete    ::=   DELETE WHERE cond_list
                {: 
                  parser.getHelper().delete(); 
                :}
              ;

col_list  ::=   col_list COMMA col 
              | col
              | NUMBER:n
                {: 
                  parser.getHelper().useAllColumns(); 
                  adams.data.spreadsheet.rowfinder.SubSample rf = new adams.data.spreadsheet.rowfinder.SubSample();
                  rf.setSize(n);
                  parser.getHelper().setSubsampleRowFinder(rf, "subsample: " + n);
                :}
              ;

col       ::=   STAR 
                {: 
                  parser.getHelper().useAllColumns(); 
                :}
              | COLUMN:c
                {: 
                  parser.getHelper().addColumn(c); 
                :}
              | COLUMN:c AS COLUMN:newc
                {: 
                  parser.getHelper().addColumn(c); 
                  parser.getHelper().renameColumn(c, newc); 
                :}
              ;

upd_list  ::= upd_list COMMA upd | upd;

upd       ::=   COLUMN:c EQ value:v
                {:
                  parser.getHelper().addUpdateColumn(c, v);
                :}
              ;

order_list::= order_list COMMA order | order;

order     ::=   COLUMN:c
                {: 
                  parser.getHelper().addSortColumn(c, true); 
                :}
              | COLUMN:c ASC
                {: 
                  parser.getHelper().addSortColumn(c, true); 
                :}
              | COLUMN:c DESC
                {: 
                  parser.getHelper().addSortColumn(c, false); 
                :}
              ;
              
value     ::=   NUMBER:n
                {:
                  RESULT = n;
                  parser.getHelper().getLogger().fine("number: " + n); 
                :}
              | STRING:s
                {:
                  RESULT = s;
                  parser.getHelper().getLogger().fine("string: " + s); 
                :}
              | PARSE LPAREN STRING:type COMMA STRING:arg RPAREN
                {:
                  if (type.equals("number")) {
                    RESULT = Double.parseDouble(arg);
                    parser.getHelper().getLogger().fine("parse/" + type + ": " + arg); 
                  }
                  else if (type.equals("date")) {
                    RESULT = new BaseDate(arg);
                    parser.getHelper().getLogger().fine("parse/" + type + ": " + arg); 
                  }
                  else if (type.equals("time")) {
                    RESULT = new BaseTime(arg);
                    parser.getHelper().getLogger().fine("parse/" + type + ": " + arg); 
                  }
                  else if (type.equals("timestamp")) {
                    RESULT = new BaseDateTime(arg);
                    parser.getHelper().getLogger().fine("parse/" + type + ": " + arg); 
                  }
                  else {
                    throw new IllegalStateException("Unhandled parse type: " + type);
                  }
                :}
              ;

cond_list ::=   cond_list cond 
              | cond:c
                {:
                  parser.getHelper().setRows(c);
                :}
              ;

cond      ::=   COLUMN:c LT value:a
                {: 
                  String comp = " < ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMaximum(n);
                    rf.setMaximumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMaximum(s);
                    rf.setMaximumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf.setMaximumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                :}
              | COLUMN:c LE value:a
                {: 
                  String comp = " <= ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMaximum(n);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMaximum(s);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                :}
              | COLUMN:c EQ value:a
                {: 
                  String comp = " = ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMinimum(n);
                    rf.setMinimumIncluded(true);
                    rf.setMaximum(n);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    if (s.isEmpty()) {
                      ByValue rf = new ByValue();
                      rf.setRegExp(new BaseRegExp("^$"));
                      rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      RESULT = parser.getHelper().applyRowFinder(rf, c + " comp " + s);
                    }
                    else {
                      ByStringComparison rf = new ByStringComparison();
                      rf.setMinimum(s);
                      rf.setMinimumIncluded(true);
                      rf.setMaximum(s);
                      rf.setMaximumIncluded(true);
                      rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                    }
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf.setMinimumIncluded(true);
                    rf.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                :}
              | COLUMN:c NOT_EQ value:a
                {: 
                  String comp = " <> ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf1 = new ByNumericValue();
                    rf1.setMinimum(n);
                    rf1.setMinimumIncluded(false);
                    rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    ByNumericValue rf2 = new ByNumericValue();
                    rf2.setMaximum(n);
                    rf2.setMaximumIncluded(false);
                    rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    MultiRowFinder multi = new MultiRowFinder();
                    multi.setFinders(new RowFinder[]{rf1, rf2});
                    multi.setCombination(MultiRowFinder.Combination.JOIN);
                    RESULT = parser.getHelper().applyRowFinder(multi, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    if (s.isEmpty()) {
                      ByValue rf = new ByValue();
                      rf.setRegExp(new BaseRegExp("^.+$"));
                      rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      RESULT = parser.getHelper().applyRowFinder(rf, c + " comp " + s);
                    }
                    else {
                      ByStringComparison rf1 = new ByStringComparison();
                      rf1.setMinimum(s);
                      rf1.setMinimumIncluded(false);
                      rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      ByStringComparison rf2 = new ByStringComparison();
                      rf2.setMaximum(s);
                      rf2.setMaximumIncluded(false);
                      rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      MultiRowFinder multi = new MultiRowFinder();
                      multi.setFinders(new RowFinder[]{rf1, rf2});
                      multi.setCombination(MultiRowFinder.Combination.JOIN);
                      RESULT = parser.getHelper().applyRowFinder(multi, c + comp + a);
                    }
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf1 = new ByDateValue();
                    rf1.setFormat(parser.getHelper().getDateFormatString());
                    rf1.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf1.setMinimumIncluded(false);
                    rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    ByDateValue rf2 = new ByDateValue();
                    rf2.setFormat(parser.getHelper().getDateFormatString());
                    rf2.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf2.setMaximumIncluded(false);
                    rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    MultiRowFinder multi = new MultiRowFinder();
                    multi.setFinders(new RowFinder[]{rf1, rf2});
                    multi.setCombination(MultiRowFinder.Combination.JOIN);
                    RESULT = parser.getHelper().applyRowFinder(multi, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                :}
              | COLUMN:c GE value:a
                {: 
                  String comp = " >= ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMinimum(n);
                    rf.setMinimumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMinimum(s);
                    rf.setMinimumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf.setMinimumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                :}
              | COLUMN:c GT value:a
                {: 
                  String comp = " > ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMinimum(n);
                    rf.setMinimumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMinimum(s);
                    rf.setMinimumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf.setMinimumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                :}
              | COLUMN:c REGEXP STRING:s
                {: 
                  ByValue rf = new ByValue();
                  rf.setRegExp(new BaseRegExp(s));
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " regexp " + s);
                :}
              | COLUMN:c IS NULL
                {: 
                  MissingValue rf = new MissingValue();
                  rf.setAttributeRange(new SpreadSheetColumnRange(SpreadSheetColumnRange.escapeName(c)));
                  RESULT = parser.getHelper().applyRowFinder(rf, "is null");
                :}
              | CELLTYPE LPAREN COLUMN:c RPAREN EQ STRING:type
                {: 
                  if (type.equals("numeric")) {
                    IsNumeric rf = new IsNumeric();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("string")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.STRING);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("long")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.LONG);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("double")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.DOUBLE);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("boolean")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.BOOLEAN);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("date")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.DATE);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("time")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.TIME);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("timestamp") || type.equals("datetime")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.DATETIME);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("anydate")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf1 = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf1.setContentType(ContentType.TIME);
                    adams.data.spreadsheet.rowfinder.ByContentType rf2 = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf2.setContentType(ContentType.DATE);
                    adams.data.spreadsheet.rowfinder.ByContentType rf3 = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf3.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf3.setContentType(ContentType.DATETIME);
                    MultiRowFinder multi = new MultiRowFinder();
                    multi.setFinders(new RowFinder[]{rf1, rf2, rf3});
                    RESULT = parser.getHelper().applyRowFinder(multi, "celltype: " + type);
                  }
                  else if (type.equals("object")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.OBJECT);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("missing")) {
                    MissingValue rf = new MissingValue();
                    rf.setAttributeRange(new SpreadSheetColumnRange(SpreadSheetColumnRange.escapeName(c)));
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else {
                    throw new IllegalStateException("Unhandled celltype: " + type);
                  }
                :}
              | LPAREN cond:c RPAREN
                {: 
                  RESULT = c; 
                :}
              | cond:c1 AND cond:c2
                {: 
                  RESULT = parser.getHelper().combineWithAnd(c1, c2); 
                :}
              | cond:c1 OR cond:c2
                {: 
                  RESULT = parser.getHelper().combineWithOr(c1, c2); 
                :}
              | NOT cond:c
                {: 
                  RESULT = parser.getHelper().invert(c); 
                :}
              ;
              
limit     ::=   LIMIT NUMBER:max
                {:
                  parser.getHelper().setLimit(0, max.intValue());
                :}
              | LIMIT NUMBER:offset COMMA NUMBER:max
                {:
                  parser.getHelper().setLimit(offset.intValue(), max.intValue());
                :}
                ;

agg_list  ::= agg_list COMMA agg | agg;

agg       ::=   COUNT
                {: 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                :}
              |  COUNT AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                  parser.getHelper().renameAggregate(Aggregate.COUNT, null, newc); 
                :}
              |  COUNT LPAREN STAR RPAREN
                {: 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                :}
              |  COUNT LPAREN STAR RPAREN AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                  parser.getHelper().renameAggregate(Aggregate.COUNT, null, newc); 
                :}
              |  COUNT LPAREN COLUMN:c RPAREN
                {:
                  parser.getHelper().addAggregate(Aggregate.COUNT, c);
                :}
              |  COUNT LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {:
                  parser.getHelper().addAggregate(Aggregate.COUNT, c);
                  parser.getHelper().renameAggregate(Aggregate.COUNT, c, newc);
                :}
              | MIN LPAREN COLUMN:c RPAREN
                {: 
                  parser.getHelper().addAggregate(Aggregate.MIN, c); 
                :}
              | MIN LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.MIN, c); 
                  parser.getHelper().renameAggregate(Aggregate.MIN, c, newc); 
                :}
              | MAX LPAREN COLUMN:c RPAREN
                {: 
                  parser.getHelper().addAggregate(Aggregate.MAX, c); 
                :}
              | MAX LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.MAX, c); 
                  parser.getHelper().renameAggregate(Aggregate.MAX, c, newc); 
                :}
              | RANGE LPAREN COLUMN:c RPAREN
                {:
                  parser.getHelper().addAggregate(Aggregate.RANGE, c);
                :}
              | RANGE LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {:
                  parser.getHelper().addAggregate(Aggregate.RANGE, c);
                  parser.getHelper().renameAggregate(Aggregate.RANGE, c, newc);
                :}
              | AVERAGE LPAREN COLUMN:c RPAREN
                {: 
                  parser.getHelper().addAggregate(Aggregate.AVERAGE, c); 
                :}
              | AVERAGE LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.AVERAGE, c); 
                  parser.getHelper().renameAggregate(Aggregate.AVERAGE, c, newc); 
                :}
              | MEDIAN LPAREN COLUMN:c RPAREN
                {: 
                  parser.getHelper().addAggregate(Aggregate.MEDIAN, c); 
                :}
              | MEDIAN LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.MEDIAN, c); 
                  parser.getHelper().renameAggregate(Aggregate.MEDIAN, c, newc); 
                :}
              | STDEV LPAREN COLUMN:c RPAREN
                {: 
                  parser.getHelper().addAggregate(Aggregate.STDEV, c); 
                :}
              | STDEV LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.STDEV, c); 
                  parser.getHelper().renameAggregate(Aggregate.STDEV, c, newc); 
                :}
              | STDEVP LPAREN COLUMN:c RPAREN
                {: 
                  parser.getHelper().addAggregate(Aggregate.STDEVP, c); 
                :}
              | STDEVP LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.STDEVP, c); 
                  parser.getHelper().renameAggregate(Aggregate.STDEVP, c, newc); 
                :}
              | IQR LPAREN COLUMN:c RPAREN
                {: 
                  parser.getHelper().addAggregate(Aggregate.INTERQUARTILE, c); 
                :}
              | IQR LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.INTERQUARTILE, c); 
                  parser.getHelper().renameAggregate(Aggregate.INTERQUARTILE, c, newc); 
                :}
              | SUM LPAREN COLUMN:c RPAREN
                {: 
                  parser.getHelper().addAggregate(Aggregate.SUM, c); 
                :}
              | SUM LPAREN COLUMN:c RPAREN AS COLUMN:newc
                {: 
                  parser.getHelper().addAggregate(Aggregate.SUM, c); 
                  parser.getHelper().renameAggregate(Aggregate.SUM, c, newc); 
                :}
              ;

groupby_list ::= groupby_list COMMA groupby | groupby;

groupby      ::=   COLUMN:c
                   {: 
                     parser.getHelper().addGroupByColumn(c); 
                   :}
                   ;
