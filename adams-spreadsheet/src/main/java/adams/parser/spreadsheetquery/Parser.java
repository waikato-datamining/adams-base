
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package adams.parser.spreadsheetquery;

import adams.core.DateValueSupporter;
import adams.core.base.BaseDate;
import adams.core.base.BaseDateTime;
import adams.core.base.BaseRegExp;
import adams.core.base.BaseTime;
import adams.core.logging.Logger;
import adams.core.logging.LoggingHelper;
import adams.data.spreadsheet.Cell.ContentType;
import adams.data.spreadsheet.SpreadSheet;
import adams.data.spreadsheet.SpreadSheetColumnIndex;
import adams.data.spreadsheet.SpreadSheetColumnRange;
import adams.data.spreadsheet.rowfinder.ByDateValue;
import adams.data.spreadsheet.rowfinder.ByNumericValue;
import adams.data.spreadsheet.rowfinder.ByStringComparison;
import adams.data.spreadsheet.rowfinder.ByValue;
import adams.data.spreadsheet.rowfinder.IsNumeric;
import adams.data.spreadsheet.rowfinder.MissingValue;
import adams.data.spreadsheet.rowfinder.MultiRowFinder;
import adams.data.spreadsheet.rowfinder.RowFinder;
import adams.flow.control.SubProcess;
import adams.flow.transformer.SpreadSheetAggregate.Aggregate;

import java.util.Date;
import java.util.HashMap;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\004\000\002\004\005\000\002\004\006\000" +
    "\002\004\007\000\002\004\007\000\002\004\010\000\002" +
    "\004\011\000\002\004\012\000\002\004\004\000\002\004" +
    "\006\000\002\004\007\000\002\004\011\000\002\005\005" +
    "\000\002\005\007\000\002\006\005\000\002\007\005\000" +
    "\002\007\003\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\005\000\002\013\005\000\002\013" +
    "\003\000\002\014\005\000\002\011\005\000\002\011\003" +
    "\000\002\012\003\000\002\012\004\000\002\012\004\000" +
    "\002\023\003\000\002\023\003\000\002\023\010\000\002" +
    "\015\004\000\002\015\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\010\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\004\000\002\024\004\000\002\024" +
    "\006\000\002\016\005\000\002\016\003\000\002\017\003" +
    "\000\002\017\005\000\002\017\006\000\002\017\010\000" +
    "\002\017\006\000\002\017\010\000\002\017\006\000\002" +
    "\017\010\000\002\017\006\000\002\017\010\000\002\017" +
    "\006\000\002\017\010\000\002\017\006\000\002\017\010" +
    "\000\002\017\006\000\002\017\010\000\002\017\006\000" +
    "\002\017\010\000\002\017\006\000\002\017\010\000\002" +
    "\017\006\000\002\017\010\000\002\017\006\000\002\017" +
    "\010\000\002\020\005\000\002\020\003\000\002\021\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\010\004\013\005\010\006\006\001\002\000" +
    "\012\002\ufffe\004\ufffe\005\ufffe\006\ufffe\001\002\000\012" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\001\002\000\004\007" +
    "\262\001\002\000\012\002\261\004\013\005\010\006\006" +
    "\001\002\000\004\010\246\001\002\000\012\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\001\002\000\012\002\ufffd\004\ufffd" +
    "\005\ufffd\006\ufffd\001\002\000\034\022\021\023\033\024" +
    "\022\025\017\026\027\027\030\030\032\031\014\032\015" +
    "\033\016\041\025\056\023\057\034\001\002\000\004\037" +
    "\241\001\002\000\004\037\234\001\002\000\004\037\227" +
    "\001\002\000\004\037\222\001\002\000\022\002\uffeb\004" +
    "\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\017\uffeb\036\uffeb" +
    "\001\002\000\024\002\uffc8\004\uffc8\005\uffc8\006\uffc8\016" +
    "\207\020\uffc8\021\uffc8\036\uffc8\037\210\001\002\000\004" +
    "\037\202\001\002\000\022\002\uffea\004\uffea\005\uffea\006" +
    "\uffea\007\uffea\011\uffea\017\uffea\036\uffea\001\002\000\020" +
    "\002\ufff3\004\ufff3\005\ufff3\006\ufff3\020\167\021\166\036" +
    "\165\001\002\000\022\002\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\011\uffe9\017\uffe9\036\uffe9\001\002\000\020\002" +
    "\uffc9\004\uffc9\005\uffc9\006\uffc9\020\uffc9\021\uffc9\036\uffc9" +
    "\001\002\000\004\037\160\001\002\000\004\037\153\001" +
    "\002\000\022\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\055" +
    "\011\052\017\054\036\051\001\002\000\004\037\044\001" +
    "\002\000\004\037\037\001\002\000\024\002\uffe8\004\uffe8" +
    "\005\uffe8\006\uffe8\007\uffe8\011\uffe8\016\035\017\uffe8\036" +
    "\uffe8\001\002\000\004\057\036\001\002\000\022\002\uffe7" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\011\uffe7\017\uffe7\036" +
    "\uffe7\001\002\000\004\057\040\001\002\000\004\040\041" +
    "\001\002\000\022\002\uffc2\004\uffc2\005\uffc2\006\uffc2\016" +
    "\042\020\uffc2\021\uffc2\036\uffc2\001\002\000\004\057\043" +
    "\001\002\000\020\002\uffc1\004\uffc1\005\uffc1\006\uffc1\020" +
    "\uffc1\021\uffc1\036\uffc1\001\002\000\004\057\045\001\002" +
    "\000\004\040\046\001\002\000\022\002\uffb8\004\uffb8\005" +
    "\uffb8\006\uffb8\016\047\020\uffb8\021\uffb8\036\uffb8\001\002" +
    "\000\004\057\050\001\002\000\020\002\uffb7\004\uffb7\005" +
    "\uffb7\006\uffb7\020\uffb7\021\uffb7\036\uffb7\001\002\000\006" +
    "\041\025\057\034\001\002\000\004\012\147\001\002\000" +
    "\012\002\ufffa\004\ufffa\005\ufffa\006\ufffa\001\002\000\004" +
    "\056\144\001\002\000\012\035\063\037\061\051\057\057" +
    "\056\001\002\000\022\013\122\015\121\043\115\044\117" +
    "\045\116\046\120\047\114\050\123\001\002\000\012\035" +
    "\063\037\061\051\057\057\056\001\002\000\032\002\uffda" +
    "\004\uffda\005\uffda\006\uffda\011\uffda\017\uffda\035\uffda\037" +
    "\uffda\051\uffda\052\074\053\075\057\uffda\001\002\000\012" +
    "\035\063\037\061\051\057\057\056\001\002\000\026\002" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\011\071\017\054\035\063" +
    "\037\061\051\057\057\056\001\002\000\004\037\064\001" +
    "\002\000\004\057\065\001\002\000\004\040\066\001\002" +
    "\000\004\047\067\001\002\000\004\060\070\001\002\000" +
    "\034\002\uffd1\004\uffd1\005\uffd1\006\uffd1\011\uffd1\017\uffd1" +
    "\035\uffd1\037\uffd1\040\uffd1\051\uffd1\052\uffd1\053\uffd1\057" +
    "\uffd1\001\002\000\004\012\100\001\002\000\012\002\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\001\002\000\032\002\uffdb\004" +
    "\uffdb\005\uffdb\006\uffdb\011\uffdb\017\uffdb\035\uffdb\037\uffdb" +
    "\051\uffdb\052\074\053\075\057\uffdb\001\002\000\012\035" +
    "\063\037\061\051\057\057\056\001\002\000\012\035\063" +
    "\037\061\051\057\057\056\001\002\000\034\002\uffce\004" +
    "\uffce\005\uffce\006\uffce\011\uffce\017\uffce\035\uffce\037\uffce" +
    "\040\uffce\051\uffce\052\uffce\053\uffce\057\uffce\001\002\000" +
    "\034\002\uffcf\004\uffcf\005\uffcf\006\uffcf\011\uffcf\017\uffcf" +
    "\035\uffcf\037\uffcf\040\uffcf\051\uffcf\052\uffcf\053\uffcf\057" +
    "\uffcf\001\002\000\004\057\103\001\002\000\016\002\uffe2" +
    "\004\uffe2\005\uffe2\006\uffe2\017\uffe2\036\uffe2\001\002\000" +
    "\016\002\ufff5\004\ufff5\005\ufff5\006\ufff5\017\054\036\106" +
    "\001\002\000\022\002\uffe1\004\uffe1\005\uffe1\006\uffe1\017" +
    "\uffe1\036\uffe1\054\104\055\105\001\002\000\016\002\uffe0" +
    "\004\uffe0\005\uffe0\006\uffe0\017\uffe0\036\uffe0\001\002\000" +
    "\016\002\uffdf\004\uffdf\005\uffdf\006\uffdf\017\uffdf\036\uffdf" +
    "\001\002\000\004\057\103\001\002\000\012\002\ufff4\004" +
    "\ufff4\005\ufff4\006\ufff4\001\002\000\016\002\uffe3\004\uffe3" +
    "\005\uffe3\006\uffe3\017\uffe3\036\uffe3\001\002\000\010\040" +
    "\112\052\074\053\075\001\002\000\034\002\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\011\uffd0\017\uffd0\035\uffd0\037\uffd0\040" +
    "\uffd0\051\uffd0\052\uffd0\053\uffd0\057\uffd0\001\002\000\034" +
    "\002\uffcd\004\uffcd\005\uffcd\006\uffcd\011\uffcd\017\uffcd\035" +
    "\uffcd\037\uffcd\040\uffcd\051\uffcd\052\uffcd\053\uffcd\057\uffcd" +
    "\001\002\000\010\034\127\056\125\060\124\001\002\000" +
    "\010\034\127\056\125\060\124\001\002\000\010\034\127" +
    "\056\125\060\124\001\002\000\010\034\127\056\125\060" +
    "\124\001\002\000\010\034\127\056\125\060\124\001\002" +
    "\000\004\060\136\001\002\000\004\014\135\001\002\000" +
    "\010\034\127\056\125\060\124\001\002\000\040\002\uffdd" +
    "\004\uffdd\005\uffdd\006\uffdd\007\uffdd\011\uffdd\017\uffdd\035" +
    "\uffdd\036\uffdd\037\uffdd\040\uffdd\051\uffdd\052\uffdd\053\uffdd" +
    "\057\uffdd\001\002\000\040\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\011\uffde\017\uffde\035\uffde\036\uffde\037\uffde" +
    "\040\uffde\051\uffde\052\uffde\053\uffde\057\uffde\001\002\000" +
    "\034\002\uffd6\004\uffd6\005\uffd6\006\uffd6\011\uffd6\017\uffd6" +
    "\035\uffd6\037\uffd6\040\uffd6\051\uffd6\052\uffd6\053\uffd6\057" +
    "\uffd6\001\002\000\004\037\130\001\002\000\004\060\131" +
    "\001\002\000\004\036\132\001\002\000\004\060\133\001" +
    "\002\000\004\040\134\001\002\000\040\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\011\uffdc\017\uffdc\035\uffdc\036" +
    "\uffdc\037\uffdc\040\uffdc\051\uffdc\052\uffdc\053\uffdc\057\uffdc" +
    "\001\002\000\034\002\uffd2\004\uffd2\005\uffd2\006\uffd2\011" +
    "\uffd2\017\uffd2\035\uffd2\037\uffd2\040\uffd2\051\uffd2\052\uffd2" +
    "\053\uffd2\057\uffd2\001\002\000\034\002\uffd3\004\uffd3\005" +
    "\uffd3\006\uffd3\011\uffd3\017\uffd3\035\uffd3\037\uffd3\040\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\057\uffd3\001\002\000\034\002" +
    "\uffd5\004\uffd5\005\uffd5\006\uffd5\011\uffd5\017\uffd5\035\uffd5" +
    "\037\uffd5\040\uffd5\051\uffd5\052\uffd5\053\uffd5\057\uffd5\001" +
    "\002\000\034\002\uffd8\004\uffd8\005\uffd8\006\uffd8\011\uffd8" +
    "\017\uffd8\035\uffd8\037\uffd8\040\uffd8\051\uffd8\052\uffd8\053" +
    "\uffd8\057\uffd8\001\002\000\034\002\uffd4\004\uffd4\005\uffd4" +
    "\006\uffd4\011\uffd4\017\uffd4\035\uffd4\037\uffd4\040\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\057\uffd4\001\002\000\034\002\uffd9" +
    "\004\uffd9\005\uffd9\006\uffd9\011\uffd9\017\uffd9\035\uffd9\037" +
    "\uffd9\040\uffd9\051\uffd9\052\uffd9\053\uffd9\057\uffd9\001\002" +
    "\000\034\002\uffd7\004\uffd7\005\uffd7\006\uffd7\011\uffd7\017" +
    "\uffd7\035\uffd7\037\uffd7\040\uffd7\051\uffd7\052\uffd7\053\uffd7" +
    "\057\uffd7\001\002\000\014\002\uffcc\004\uffcc\005\uffcc\006" +
    "\uffcc\036\145\001\002\000\004\056\146\001\002\000\012" +
    "\002\uffcb\004\uffcb\005\uffcb\006\uffcb\001\002\000\004\057" +
    "\103\001\002\000\016\002\ufff7\004\ufff7\005\ufff7\006\ufff7" +
    "\017\054\036\106\001\002\000\012\002\ufff6\004\ufff6\005" +
    "\ufff6\006\ufff6\001\002\000\022\002\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\011\uffec\017\uffec\036\uffec\001\002\000" +
    "\004\057\154\001\002\000\004\040\155\001\002\000\022" +
    "\002\uffba\004\uffba\005\uffba\006\uffba\016\156\020\uffba\021" +
    "\uffba\036\uffba\001\002\000\004\057\157\001\002\000\020" +
    "\002\uffb9\004\uffb9\005\uffb9\006\uffb9\020\uffb9\021\uffb9\036" +
    "\uffb9\001\002\000\004\057\161\001\002\000\004\040\162" +
    "\001\002\000\022\002\uffbc\004\uffbc\005\uffbc\006\uffbc\016" +
    "\163\020\uffbc\021\uffbc\036\uffbc\001\002\000\004\057\164" +
    "\001\002\000\020\002\uffbb\004\uffbb\005\uffbb\006\uffbb\020" +
    "\uffbb\021\uffbb\036\uffbb\001\002\000\026\022\021\023\033" +
    "\024\022\025\017\026\027\027\030\030\032\031\014\032" +
    "\015\033\016\001\002\000\012\035\063\037\061\051\057" +
    "\057\056\001\002\000\004\012\170\001\002\000\004\057" +
    "\173\001\002\000\016\002\uffaf\004\uffaf\005\uffaf\006\uffaf" +
    "\021\uffaf\036\uffaf\001\002\000\016\002\ufff1\004\ufff1\005" +
    "\ufff1\006\ufff1\021\175\036\174\001\002\000\016\002\uffae" +
    "\004\uffae\005\uffae\006\uffae\021\uffae\036\uffae\001\002\000" +
    "\004\057\173\001\002\000\012\035\063\037\061\051\057" +
    "\057\056\001\002\000\022\002\ufff0\004\ufff0\005\ufff0\006" +
    "\ufff0\035\063\037\061\051\057\057\056\001\002\000\016" +
    "\002\uffb0\004\uffb0\005\uffb0\006\uffb0\021\uffb0\036\uffb0\001" +
    "\002\000\022\002\ufff2\004\ufff2\005\ufff2\006\ufff2\035\063" +
    "\037\061\051\057\057\056\001\002\000\020\002\uffca\004" +
    "\uffca\005\uffca\006\uffca\020\uffca\021\uffca\036\uffca\001\002" +
    "\000\004\057\203\001\002\000\004\040\204\001\002\000" +
    "\022\002\uffc0\004\uffc0\005\uffc0\006\uffc0\016\205\020\uffc0" +
    "\021\uffc0\036\uffc0\001\002\000\004\057\206\001\002\000" +
    "\020\002\uffbf\004\uffbf\005\uffbf\006\uffbf\020\uffbf\021\uffbf" +
    "\036\uffbf\001\002\000\004\057\221\001\002\000\006\041" +
    "\211\057\212\001\002\000\004\040\216\001\002\000\004" +
    "\040\213\001\002\000\022\002\uffc4\004\uffc4\005\uffc4\006" +
    "\uffc4\016\214\020\uffc4\021\uffc4\036\uffc4\001\002\000\004" +
    "\057\215\001\002\000\020\002\uffc3\004\uffc3\005\uffc3\006" +
    "\uffc3\020\uffc3\021\uffc3\036\uffc3\001\002\000\022\002\uffc6" +
    "\004\uffc6\005\uffc6\006\uffc6\016\217\020\uffc6\021\uffc6\036" +
    "\uffc6\001\002\000\004\057\220\001\002\000\020\002\uffc5" +
    "\004\uffc5\005\uffc5\006\uffc5\020\uffc5\021\uffc5\036\uffc5\001" +
    "\002\000\020\002\uffc7\004\uffc7\005\uffc7\006\uffc7\020\uffc7" +
    "\021\uffc7\036\uffc7\001\002\000\004\057\223\001\002\000" +
    "\004\040\224\001\002\000\022\002\uffbe\004\uffbe\005\uffbe" +
    "\006\uffbe\016\225\020\uffbe\021\uffbe\036\uffbe\001\002\000" +
    "\004\057\226\001\002\000\020\002\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\020\uffbd\021\uffbd\036\uffbd\001\002\000\004\057" +
    "\230\001\002\000\004\040\231\001\002\000\022\002\uffb4" +
    "\004\uffb4\005\uffb4\006\uffb4\016\232\020\uffb4\021\uffb4\036" +
    "\uffb4\001\002\000\004\057\233\001\002\000\020\002\uffb3" +
    "\004\uffb3\005\uffb3\006\uffb3\020\uffb3\021\uffb3\036\uffb3\001" +
    "\002\000\004\057\235\001\002\000\004\040\236\001\002" +
    "\000\022\002\uffb2\004\uffb2\005\uffb2\006\uffb2\016\237\020" +
    "\uffb2\021\uffb2\036\uffb2\001\002\000\004\057\240\001\002" +
    "\000\020\002\uffb1\004\uffb1\005\uffb1\006\uffb1\020\uffb1\021" +
    "\uffb1\036\uffb1\001\002\000\004\057\242\001\002\000\004" +
    "\040\243\001\002\000\022\002\uffb6\004\uffb6\005\uffb6\006" +
    "\uffb6\016\244\020\uffb6\021\uffb6\036\uffb6\001\002\000\004" +
    "\057\245\001\002\000\020\002\uffb5\004\uffb5\005\uffb5\006" +
    "\uffb5\020\uffb5\021\uffb5\036\uffb5\001\002\000\004\057\247" +
    "\001\002\000\004\047\256\001\002\000\016\002\uffef\004" +
    "\uffef\005\uffef\006\uffef\007\253\036\252\001\002\000\016" +
    "\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\036\uffe5\001" +
    "\002\000\004\057\247\001\002\000\012\035\063\037\061" +
    "\051\057\057\056\001\002\000\022\002\uffee\004\uffee\005" +
    "\uffee\006\uffee\035\063\037\061\051\057\057\056\001\002" +
    "\000\016\002\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\036" +
    "\uffe6\001\002\000\010\034\127\056\125\060\124\001\002" +
    "\000\016\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\036" +
    "\uffe4\001\002\000\012\002\001\004\001\005\001\006\001" +
    "\001\002\000\004\002\000\001\002\000\012\035\063\037" +
    "\061\051\057\057\056\001\002\000\022\002\uffed\004\uffed" +
    "\005\uffed\006\uffed\035\063\037\061\051\057\057\056\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\261\000\014\002\006\003\004\004\003\005\011\006" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\003\257\004\003\005\011\006\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\030\010\017\016\023\017\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\024\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\061\022\057\001\001" +
    "\000\002\001\001\000\004\022\112\001\001\000\002\001" +
    "\001\000\004\022\110\001\001\000\006\022\072\024\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\022\076\001\001\000\004\022\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\101\012\100\001" +
    "\001\000\002\001\001\000\004\024\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\142\001\001\000\004\023\141\001\001\000\004\023\140" +
    "\001\001\000\004\023\137\001\001\000\004\023\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\023\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\147\012\100\001\001\000\004\024\150\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\200\001\001\000\006\015\177\022\057\001\001\000\002" +
    "\001\001\000\006\020\171\021\170\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\176" +
    "\001\001\000\006\015\175\022\057\001\001\000\004\022" +
    "\072\001\001\000\002\001\001\000\004\022\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\247\014\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\254\001\001\000\006\015\253\022\057\001\001" +
    "\000\004\022\072\001\001\000\002\001\001\000\004\023" +
    "\256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\262\022\057\001\001\000\004\022" +
    "\072\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /** the logger. */
  private final static Logger LOGGER = LoggingHelper.getConsoleLogger(Parser.class);
  
  /** variable - value relation. */
  protected HashMap m_Symbols = new HashMap();

  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /**
   * Returns the logger.
   *
   * @return the variable-value relation
   */
  public Logger getLogger() {
    return LOGGER;
  }

  /**
   * Sets the variable - value relation to use.
   *
   * @param value the variable-value relation
   */
  public void setSymbols(HashMap value) {
    m_Symbols = value;
    m_Helper.setSymbols(value);
  }

  /**
   * Returns the current variable - value relation in use.
   *
   * @return the variable-value relation
   */
  public HashMap getSymbols() {
    return m_Symbols;
  }

  /**
   * Sets the spreadsheet to use.
   *
   * @param value the spreadsheet
   */
  public void setSheet(SpreadSheet value) {
    m_Helper.setSheet(value);
  }

  /**
   * Returns the current spreadsheet in use.
   *
   * @return the spreadsheet
   */
  public SpreadSheet getSheet() {
    return m_Helper.getSheet();
  }

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }

  /**
   * Returns the partial flow that was generated to process the spreadsheet.
   *
   * @return the partial flow, null if none available
   */
  public SubProcess getSubProcess() {
    return m_Helper.getSubProcess();
  }

  /**
   * Returns the result of the evaluation.
   *
   * @return the result
   */
  public SpreadSheet getResult() {
    return m_Helper.getResult();
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= select 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= update 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr_part ::= delete 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // select ::= SELECT col_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // select ::= SELECT col_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // select ::= SELECT col_list WHERE cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // select ::= SELECT col_list WHERE cond_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // select ::= SELECT col_list ORDER BY order_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // select ::= SELECT col_list ORDER BY order_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // select ::= SELECT col_list WHERE cond_list ORDER BY order_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // select ::= SELECT col_list WHERE cond_list ORDER BY order_list limit 
            {
              Object RESULT =null;
		 
                  parser.getHelper().select(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // select ::= SELECT agg_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().aggregate(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // select ::= SELECT agg_list HAVING cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().aggregate(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // select ::= SELECT agg_list GROUP BY groupby_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().aggregate(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // select ::= SELECT agg_list GROUP BY groupby_list HAVING cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().aggregate(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("select",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // update ::= UPDATE SET upd_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().update(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("update",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // update ::= UPDATE SET upd_list WHERE cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().update(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("update",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // delete ::= DELETE WHERE cond_list 
            {
              Object RESULT =null;
		 
                  parser.getHelper().delete(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("delete",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // col_list ::= col_list COMMA col 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // col_list ::= col 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // col_list ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().useAllColumns(); 
                  adams.data.spreadsheet.rowfinder.SubSample rf = new adams.data.spreadsheet.rowfinder.SubSample();
                  rf.setSize(n);
                  parser.getHelper().setSubsampleRowFinder(rf, "subsample: " + n);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // col ::= STAR 
            {
              Object RESULT =null;
		 
                  parser.getHelper().useAllColumns(); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // col ::= COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addColumn(c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // col ::= COLUMN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addColumn(c); 
                  parser.getHelper().renameColumn(c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("col",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // upd_list ::= upd_list COMMA upd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upd_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // upd_list ::= upd 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upd_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // upd ::= COLUMN EQ value 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().addUpdateColumn(c, v);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("upd",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // order_list ::= order_list COMMA order 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // order_list ::= order 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // order ::= COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addSortColumn(c, true); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // order ::= COLUMN ASC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addSortColumn(c, true); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // order ::= COLUMN DESC 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addSortColumn(c, false); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("order",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // value ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = n;
                  parser.getHelper().getLogger().fine("number: " + n); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // value ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  RESULT = s;
                  parser.getHelper().getLogger().fine("string: " + s); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // value ::= PARSE LPAREN STRING COMMA STRING RPAREN 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int argleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String arg = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  if (type.equals("number")) {
                    RESULT = Double.parseDouble(arg);
                    parser.getHelper().getLogger().fine("parse/" + type + ": " + arg); 
                  }
                  else if (type.equals("date")) {
                    RESULT = new BaseDate(arg);
                    parser.getHelper().getLogger().fine("parse/" + type + ": " + arg); 
                  }
                  else if (type.equals("time")) {
                    RESULT = new BaseTime(arg);
                    parser.getHelper().getLogger().fine("parse/" + type + ": " + arg); 
                  }
                  else if (type.equals("timestamp")) {
                    RESULT = new BaseDateTime(arg);
                    parser.getHelper().getLogger().fine("parse/" + type + ": " + arg); 
                  }
                  else {
                    throw new IllegalStateException("Unhandled parse type: " + type);
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // cond_list ::= cond_list cond 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // cond_list ::= cond 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().setRows(c);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond_list",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cond ::= COLUMN LT value 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " < ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMaximum(n);
                    rf.setMaximumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMaximum(s);
                    rf.setMaximumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf.setMaximumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cond ::= COLUMN LE value 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " <= ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMaximum(n);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMaximum(s);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cond ::= COLUMN EQ value 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " = ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMinimum(n);
                    rf.setMinimumIncluded(true);
                    rf.setMaximum(n);
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    if (s.isEmpty()) {
                      ByValue rf = new ByValue();
                      rf.setRegExp(new BaseRegExp("^$"));
                      rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      RESULT = parser.getHelper().applyRowFinder(rf, c + " comp " + s);
                    }
                    else {
                      ByStringComparison rf = new ByStringComparison();
                      rf.setMinimum(s);
                      rf.setMinimumIncluded(true);
                      rf.setMaximum(s);
                      rf.setMaximumIncluded(true);
                      rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                    }
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf.setMinimumIncluded(true);
                    rf.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf.setMaximumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cond ::= COLUMN NOT_EQ value 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " <> ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf1 = new ByNumericValue();
                    rf1.setMinimum(n);
                    rf1.setMinimumIncluded(false);
                    rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    ByNumericValue rf2 = new ByNumericValue();
                    rf2.setMaximum(n);
                    rf2.setMaximumIncluded(false);
                    rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    MultiRowFinder multi = new MultiRowFinder();
                    multi.setFinders(new RowFinder[]{rf1, rf2});
                    multi.setCombination(MultiRowFinder.Combination.JOIN);
                    RESULT = parser.getHelper().applyRowFinder(multi, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    if (s.isEmpty()) {
                      ByValue rf = new ByValue();
                      rf.setRegExp(new BaseRegExp("^.+$"));
                      rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      RESULT = parser.getHelper().applyRowFinder(rf, c + " comp " + s);
                    }
                    else {
                      ByStringComparison rf1 = new ByStringComparison();
                      rf1.setMinimum(s);
                      rf1.setMinimumIncluded(false);
                      rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      ByStringComparison rf2 = new ByStringComparison();
                      rf2.setMaximum(s);
                      rf2.setMaximumIncluded(false);
                      rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                      MultiRowFinder multi = new MultiRowFinder();
                      multi.setFinders(new RowFinder[]{rf1, rf2});
                      multi.setCombination(MultiRowFinder.Combination.JOIN);
                      RESULT = parser.getHelper().applyRowFinder(multi, c + comp + a);
                    }
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf1 = new ByDateValue();
                    rf1.setFormat(parser.getHelper().getDateFormatString());
                    rf1.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf1.setMinimumIncluded(false);
                    rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    ByDateValue rf2 = new ByDateValue();
                    rf2.setFormat(parser.getHelper().getDateFormatString());
                    rf2.setMaximum(parser.getHelper().getDateFormat().format(d));
                    rf2.setMaximumIncluded(false);
                    rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    MultiRowFinder multi = new MultiRowFinder();
                    multi.setFinders(new RowFinder[]{rf1, rf2});
                    multi.setCombination(MultiRowFinder.Combination.JOIN);
                    RESULT = parser.getHelper().applyRowFinder(multi, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cond ::= COLUMN GE value 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " >= ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMinimum(n);
                    rf.setMinimumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMinimum(s);
                    rf.setMinimumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf.setMinimumIncluded(true);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cond ::= COLUMN GT value 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  String comp = " > ";
                  if (a instanceof Double) {
                    Double n = (Double) a;
                    ByNumericValue rf = new ByNumericValue();
                    rf.setMinimum(n);
                    rf.setMinimumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof String) {
                    String s = (String) a;
                    ByStringComparison rf = new ByStringComparison();
                    rf.setMinimum(s);
                    rf.setMinimumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else if (a instanceof DateValueSupporter) {
                    Date d = ((DateValueSupporter) a).dateValue();
                    ByDateValue rf = new ByDateValue();
                    rf.setFormat(parser.getHelper().getDateFormatString());
                    rf.setMinimum(parser.getHelper().getDateFormat().format(d));
                    rf.setMinimumIncluded(false);
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, c + comp + a);
                  }
                  else {
                    throw new IllegalStateException(
                        "Unhandled comparison class ('" + comp + "'): " 
                        + a.getClass().getName() + " (" + a + ")");
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cond ::= COLUMN REGEXP STRING 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  ByValue rf = new ByValue();
                  rf.setRegExp(new BaseRegExp(s));
                  rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                  RESULT = parser.getHelper().applyRowFinder(rf, c + " regexp " + s);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // cond ::= COLUMN IS NULL 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                  MissingValue rf = new MissingValue();
                  rf.setAttributeRange(new SpreadSheetColumnRange(SpreadSheetColumnRange.escapeName(c)));
                  RESULT = parser.getHelper().applyRowFinder(rf, "is null");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // cond ::= CELLTYPE LPAREN COLUMN RPAREN EQ STRING 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  if (type.equals("numeric")) {
                    IsNumeric rf = new IsNumeric();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("string")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.STRING);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("long")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.LONG);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("double")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.DOUBLE);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("boolean")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.BOOLEAN);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("date")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.DATE);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("time")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.TIME);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("timestamp") || type.equals("datetime")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.DATETIME);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("anydate")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf1 = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf1.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf1.setContentType(ContentType.TIME);
                    adams.data.spreadsheet.rowfinder.ByContentType rf2 = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf2.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf2.setContentType(ContentType.DATE);
                    adams.data.spreadsheet.rowfinder.ByContentType rf3 = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf3.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf3.setContentType(ContentType.DATETIME);
                    MultiRowFinder multi = new MultiRowFinder();
                    multi.setFinders(new RowFinder[]{rf1, rf2, rf3});
                    RESULT = parser.getHelper().applyRowFinder(multi, "celltype: " + type);
                  }
                  else if (type.equals("object")) {
                    adams.data.spreadsheet.rowfinder.ByContentType rf = new adams.data.spreadsheet.rowfinder.ByContentType();
                    rf.setAttributeIndex(new SpreadSheetColumnIndex(c));
                    rf.setContentType(ContentType.OBJECT);
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else if (type.equals("missing")) {
                    MissingValue rf = new MissingValue();
                    rf.setAttributeRange(new SpreadSheetColumnRange(SpreadSheetColumnRange.escapeName(c)));
                    RESULT = parser.getHelper().applyRowFinder(rf, "celltype: " + type);
                  }
                  else {
                    throw new IllegalStateException("Unhandled celltype: " + type);
                  }
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // cond ::= LPAREN cond RPAREN 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  RESULT = c; 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // cond ::= cond AND cond 
            {
              int[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c1 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c2 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = parser.getHelper().combineWithAnd(c1, c2); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // cond ::= cond OR cond 
            {
              int[] RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		int[] c1 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c2 = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = parser.getHelper().combineWithOr(c1, c2); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // cond ::= NOT cond 
            {
              int[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		int[] c = (int[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  RESULT = parser.getHelper().invert(c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cond",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // limit ::= LIMIT NUMBER 
            {
              Object RESULT =null;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double max = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().setLimit(0, max.intValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // limit ::= LIMIT NUMBER COMMA NUMBER 
            {
              Object RESULT =null;
		int offsetleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int offsetright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double offset = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int maxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int maxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double max = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().setLimit(offset.intValue(), max.intValue());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("limit",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // agg_list ::= agg_list COMMA agg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // agg_list ::= agg 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg_list",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // agg ::= COUNT 
            {
              Object RESULT =null;
		 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // agg ::= COUNT AS COLUMN 
            {
              Object RESULT =null;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                  parser.getHelper().renameAggregate(Aggregate.COUNT, null, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // agg ::= COUNT LPAREN STAR RPAREN 
            {
              Object RESULT =null;
		 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // agg ::= COUNT LPAREN STAR RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.COUNT, null); 
                  parser.getHelper().renameAggregate(Aggregate.COUNT, null, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // agg ::= COUNT LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  parser.getHelper().addAggregate(Aggregate.COUNT, c);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // agg ::= COUNT LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().addAggregate(Aggregate.COUNT, c);
                  parser.getHelper().renameAggregate(Aggregate.COUNT, c, newc);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // agg ::= MIN LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MIN, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // agg ::= MIN LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MIN, c); 
                  parser.getHelper().renameAggregate(Aggregate.MIN, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // agg ::= MAX LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MAX, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // agg ::= MAX LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MAX, c); 
                  parser.getHelper().renameAggregate(Aggregate.MAX, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // agg ::= RANGE LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                  parser.getHelper().addAggregate(Aggregate.RANGE, c);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // agg ::= RANGE LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                  parser.getHelper().addAggregate(Aggregate.RANGE, c);
                  parser.getHelper().renameAggregate(Aggregate.RANGE, c, newc);
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // agg ::= AVERAGE LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.AVERAGE, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // agg ::= AVERAGE LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.AVERAGE, c); 
                  parser.getHelper().renameAggregate(Aggregate.AVERAGE, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // agg ::= MEDIAN LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MEDIAN, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // agg ::= MEDIAN LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.MEDIAN, c); 
                  parser.getHelper().renameAggregate(Aggregate.MEDIAN, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // agg ::= STDEV LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.STDEV, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // agg ::= STDEV LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.STDEV, c); 
                  parser.getHelper().renameAggregate(Aggregate.STDEV, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // agg ::= STDEVP LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.STDEVP, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // agg ::= STDEVP LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.STDEVP, c); 
                  parser.getHelper().renameAggregate(Aggregate.STDEVP, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // agg ::= IQR LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.INTERQUARTILE, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // agg ::= IQR LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.INTERQUARTILE, c); 
                  parser.getHelper().renameAggregate(Aggregate.INTERQUARTILE, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // agg ::= SUM LPAREN COLUMN RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                  parser.getHelper().addAggregate(Aggregate.SUM, c); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // agg ::= SUM LPAREN COLUMN RPAREN AS COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int newcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int newcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String newc = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                  parser.getHelper().addAggregate(Aggregate.SUM, c); 
                  parser.getHelper().renameAggregate(Aggregate.SUM, c, newc); 
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("agg",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // groupby_list ::= groupby_list COMMA groupby 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("groupby_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // groupby_list ::= groupby 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("groupby_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // groupby ::= COLUMN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                     parser.getHelper().addGroupByColumn(c); 
                   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("groupby",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
