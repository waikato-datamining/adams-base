
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package adams.parser.lookupupdate;

import adams.core.base.BaseRegExp;
import adams.core.logging.Logger;
import adams.core.logging.LoggingHelper;
import adams.parser.ParserHelper;

import java.lang.reflect.Array;
import java.util.HashMap;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\007" +
    "\000\002\004\011\000\002\005\006\000\002\005\011\000" +
    "\002\006\004\000\002\006\003\000\002\007\006\000\002" +
    "\007\011\000\002\010\004\000\002\010\003\000\002\011" +
    "\006\000\002\011\011\000\002\012\005\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\004\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\012\005\000\002\012\005\000\002\012\010\000" +
    "\002\012\010\000\002\012\010\000\002\012\012\000\002" +
    "\012\010\000\002\012\012\000\002\012\010\000\002\012" +
    "\012\000\002\012\010\000\002\012\010\000\002\012\010" +
    "\000\002\012\012\000\002\012\014\000\002\012\016\000" +
    "\002\012\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\014\000\002\012\012\000\002\012\012\000\002\012" +
    "\014\000\002\012\006\000\002\012\010\000\002\012\010" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\006\000\002" +
    "\012\006\000\002\012\006\000\002\012\006\000\002\012" +
    "\006\000\002\012\006\000\002\012\006\000\002\012\006" +
    "\000\002\012\010\000\002\012\010\000\002\012\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\010\000\002" +
    "\012\006\000\002\012\010\000\002\012\010\000\002\012" +
    "\006\000\002\012\006\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\010\004\011\017\004\112\012\001\002\000" +
    "\004\073\u013d\001\002\000\012\002\ufffe\004\ufffe\017\ufffe" +
    "\112\ufffe\001\002\000\012\002\uffff\004\uffff\017\uffff\112" +
    "\uffff\001\002\000\012\002\u013c\004\011\017\004\112\012" +
    "\001\002\000\012\002\ufffd\004\ufffd\017\ufffd\112\ufffd\001" +
    "\002\000\144\010\031\020\017\021\016\022\054\023\041" +
    "\024\060\025\052\026\030\027\064\030\032\031\015\032" +
    "\065\033\040\034\073\035\050\036\061\037\023\040\014" +
    "\041\044\042\035\043\074\044\042\045\071\046\047\047" +
    "\075\050\033\051\055\052\020\053\053\054\022\055\026" +
    "\056\021\057\027\060\070\061\045\062\036\063\057\064" +
    "\072\065\025\066\066\067\037\073\024\075\046\076\067" +
    "\105\034\110\051\111\043\112\056\113\063\001\002\000" +
    "\004\070\013\001\002\000\144\010\031\020\017\021\016" +
    "\022\054\023\041\024\060\025\052\026\030\027\064\030" +
    "\032\031\015\032\065\033\040\034\073\035\050\036\061" +
    "\037\023\040\014\041\044\042\035\043\074\044\042\045" +
    "\071\046\047\047\075\050\033\051\055\052\020\053\053" +
    "\054\022\055\026\056\021\057\027\060\070\061\045\062" +
    "\036\063\057\064\072\065\025\066\066\067\037\073\024" +
    "\075\046\076\067\105\034\110\051\111\043\112\056\113" +
    "\063\001\002\000\004\073\u0117\001\002\000\004\073\u0112" +
    "\001\002\000\004\073\u010f\001\002\000\004\073\u010c\001" +
    "\002\000\004\073\u0104\001\002\000\004\073\374\001\002" +
    "\000\004\073\356\001\002\000\004\073\353\001\002\000" +
    "\144\010\031\020\017\021\016\022\054\023\041\024\060" +
    "\025\052\026\030\027\064\030\032\031\015\032\065\033" +
    "\040\034\073\035\050\036\061\037\023\040\014\041\044" +
    "\042\035\043\074\044\042\045\071\046\047\047\075\050" +
    "\033\051\055\052\020\053\053\054\022\055\026\056\021" +
    "\057\027\060\070\061\045\062\036\063\057\064\072\065" +
    "\025\066\066\067\037\073\024\075\046\076\067\105\034" +
    "\110\051\111\043\112\056\113\063\001\002\000\004\073" +
    "\344\001\002\000\004\073\337\001\002\000\004\073\334" +
    "\001\002\000\004\073\331\001\002\000\144\010\031\020" +
    "\017\021\016\022\054\023\041\024\060\025\052\026\030" +
    "\027\064\030\032\031\015\032\065\033\040\034\073\035" +
    "\050\036\061\037\023\040\014\041\044\042\035\043\074" +
    "\044\042\045\071\046\047\047\075\050\033\051\055\052" +
    "\020\053\053\054\022\055\026\056\021\057\027\060\070" +
    "\061\045\062\036\063\057\064\072\065\025\066\066\067" +
    "\037\073\024\075\046\076\067\105\034\110\051\111\043" +
    "\112\056\113\063\001\002\000\004\073\325\001\002\000" +
    "\004\073\316\001\002\000\144\010\031\020\017\021\016" +
    "\022\054\023\041\024\060\025\052\026\030\027\064\030" +
    "\032\031\015\032\065\033\040\034\073\035\050\036\061" +
    "\037\023\040\014\041\044\042\035\043\074\044\042\045" +
    "\071\046\047\047\075\050\033\051\055\052\020\053\053" +
    "\054\022\055\026\056\021\057\027\060\070\061\045\062" +
    "\036\063\057\064\072\065\025\066\066\067\037\073\024" +
    "\075\046\076\067\105\034\110\051\111\043\112\056\113" +
    "\063\001\002\000\004\073\312\001\002\000\004\073\307" +
    "\001\002\000\004\073\304\001\002\000\004\073\277\001" +
    "\002\000\004\073\274\001\002\000\004\073\267\001\002" +
    "\000\046\005\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\071\uffed\072\uffed\074\uffed\077\uffed\100\uffed" +
    "\101\uffed\102\uffed\103\uffed\104\uffed\106\uffed\107\uffed\001" +
    "\002\000\004\073\262\001\002\000\004\073\257\001\002" +
    "\000\046\005\uffeb\010\uffeb\012\uffeb\013\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\071\uffeb\072\uffeb\074\uffeb\077\uffeb\100\uffeb" +
    "\101\uffeb\102\uffeb\103\uffeb\104\uffeb\106\uffeb\107\uffeb\001" +
    "\002\000\004\073\250\001\002\000\004\073\245\001\002" +
    "\000\046\005\uffef\010\uffef\012\uffef\013\uffef\014\uffef\015" +
    "\uffef\016\uffef\071\uffef\072\uffef\074\uffef\077\uffef\100\uffef" +
    "\101\uffef\102\uffef\103\uffef\104\uffef\106\uffef\107\uffef\001" +
    "\002\000\004\073\242\001\002\000\004\073\235\001\002" +
    "\000\004\073\232\001\002\000\004\073\220\001\002\000" +
    "\046\005\uffec\010\uffec\012\uffec\013\uffec\014\uffec\015\uffec" +
    "\016\uffec\071\uffec\072\uffec\074\uffec\077\uffec\100\uffec\101" +
    "\uffec\102\uffec\103\uffec\104\uffec\106\uffec\107\uffec\001\002" +
    "\000\004\073\215\001\002\000\004\073\212\001\002\000" +
    "\004\073\202\001\002\000\040\010\101\012\105\013\113" +
    "\014\112\015\114\016\110\071\201\077\115\100\106\101" +
    "\107\102\102\103\104\104\103\106\100\107\116\001\002" +
    "\000\046\005\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015" +
    "\uffee\016\uffee\071\uffee\072\uffee\074\uffee\077\uffee\100\uffee" +
    "\101\uffee\102\uffee\103\uffee\104\uffee\106\uffee\107\uffee\001" +
    "\002\000\004\073\176\001\002\000\004\073\173\001\002" +
    "\000\004\073\166\001\002\000\046\005\uffea\010\uffea\012" +
    "\uffea\013\uffea\014\uffea\015\uffea\016\uffea\071\uffea\072\uffea" +
    "\074\uffea\077\uffea\100\uffea\101\uffea\102\uffea\103\uffea\104" +
    "\uffea\106\uffea\107\uffea\001\002\000\004\073\163\001\002" +
    "\000\004\073\156\001\002\000\004\073\153\001\002\000" +
    "\004\073\146\001\002\000\004\073\143\001\002\000\004" +
    "\073\076\001\002\000\144\010\031\020\017\021\016\022" +
    "\054\023\041\024\060\025\052\026\030\027\064\030\032" +
    "\031\015\032\065\033\040\034\073\035\050\036\061\037" +
    "\023\040\014\041\044\042\035\043\074\044\042\045\071" +
    "\046\047\047\075\050\033\051\055\052\020\053\053\054" +
    "\022\055\026\056\021\057\027\060\070\061\045\062\036" +
    "\063\057\064\072\065\025\066\066\067\037\073\024\075" +
    "\046\076\067\105\034\110\051\111\043\112\056\113\063" +
    "\001\002\000\040\010\101\012\105\013\113\014\112\015" +
    "\114\016\110\072\111\077\115\100\106\101\107\102\102" +
    "\103\104\104\103\106\100\107\116\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\144\010\031\020" +
    "\017\021\016\022\054\023\041\024\060\025\052\026\030" +
    "\027\064\030\032\031\015\032\065\033\040\034\073\035" +
    "\050\036\061\037\023\040\014\041\044\042\035\043\074" +
    "\044\042\045\071\046\047\047\075\050\033\051\055\052" +
    "\020\053\053\054\022\055\026\056\021\057\027\060\070" +
    "\061\045\062\036\063\057\064\072\065\025\066\066\067" +
    "\037\073\024\075\046\076\067\105\034\110\051\111\043" +
    "\112\056\113\063\001\002\000\144\010\031\020\017\021" +
    "\016\022\054\023\041\024\060\025\052\026\030\027\064" +
    "\030\032\031\015\032\065\033\040\034\073\035\050\036" +
    "\061\037\023\040\014\041\044\042\035\043\074\044\042" +
    "\045\071\046\047\047\075\050\033\051\055\052\020\053" +
    "\053\054\022\055\026\056\021\057\027\060\070\061\045" +
    "\062\036\063\057\064\072\065\025\066\066\067\037\073" +
    "\024\075\046\076\067\105\034\110\051\111\043\112\056" +
    "\113\063\001\002\000\144\010\031\020\017\021\016\022" +
    "\054\023\041\024\060\025\052\026\030\027\064\030\032" +
    "\031\015\032\065\033\040\034\073\035\050\036\061\037" +
    "\023\040\014\041\044\042\035\043\074\044\042\045\071" +
    "\046\047\047\075\050\033\051\055\052\020\053\053\054" +
    "\022\055\026\056\021\057\027\060\070\061\045\062\036" +
    "\063\057\064\072\065\025\066\066\067\037\073\024\075" +
    "\046\076\067\105\034\110\051\111\043\112\056\113\063" +
    "\001\002\000\144\010\031\020\017\021\016\022\054\023" +
    "\041\024\060\025\052\026\030\027\064\030\032\031\015" +
    "\032\065\033\040\034\073\035\050\036\061\037\023\040" +
    "\014\041\044\042\035\043\074\044\042\045\071\046\047" +
    "\047\075\050\033\051\055\052\020\053\053\054\022\055" +
    "\026\056\021\057\027\060\070\061\045\062\036\063\057" +
    "\064\072\065\025\066\066\067\037\073\024\075\046\076" +
    "\067\105\034\110\051\111\043\112\056\113\063\001\002" +
    "\000\144\010\031\020\017\021\016\022\054\023\041\024" +
    "\060\025\052\026\030\027\064\030\032\031\015\032\065" +
    "\033\040\034\073\035\050\036\061\037\023\040\014\041" +
    "\044\042\035\043\074\044\042\045\071\046\047\047\075" +
    "\050\033\051\055\052\020\053\053\054\022\055\026\056" +
    "\021\057\027\060\070\061\045\062\036\063\057\064\072" +
    "\065\025\066\066\067\037\073\024\075\046\076\067\105" +
    "\034\110\051\111\043\112\056\113\063\001\002\000\144" +
    "\010\031\020\017\021\016\022\054\023\041\024\060\025" +
    "\052\026\030\027\064\030\032\031\015\032\065\033\040" +
    "\034\073\035\050\036\061\037\023\040\014\041\044\042" +
    "\035\043\074\044\042\045\071\046\047\047\075\050\033" +
    "\051\055\052\020\053\053\054\022\055\026\056\021\057" +
    "\027\060\070\061\045\062\036\063\057\064\072\065\025" +
    "\066\066\067\037\073\024\075\046\076\067\105\034\110" +
    "\051\111\043\112\056\113\063\001\002\000\144\010\031" +
    "\020\017\021\016\022\054\023\041\024\060\025\052\026" +
    "\030\027\064\030\032\031\015\032\065\033\040\034\073" +
    "\035\050\036\061\037\023\040\014\041\044\042\035\043" +
    "\074\044\042\045\071\046\047\047\075\050\033\051\055" +
    "\052\020\053\053\054\022\055\026\056\021\057\027\060" +
    "\070\061\045\062\036\063\057\064\072\065\025\066\066" +
    "\067\037\073\024\075\046\076\067\105\034\110\051\111" +
    "\043\112\056\113\063\001\002\000\144\010\031\020\017" +
    "\021\016\022\054\023\041\024\060\025\052\026\030\027" +
    "\064\030\032\031\015\032\065\033\040\034\073\035\050" +
    "\036\061\037\023\040\014\041\044\042\035\043\074\044" +
    "\042\045\071\046\047\047\075\050\033\051\055\052\020" +
    "\053\053\054\022\055\026\056\021\057\027\060\070\061" +
    "\045\062\036\063\057\064\072\065\025\066\066\067\037" +
    "\073\024\075\046\076\067\105\034\110\051\111\043\112" +
    "\056\113\063\001\002\000\144\010\031\020\017\021\016" +
    "\022\054\023\041\024\060\025\052\026\030\027\064\030" +
    "\032\031\015\032\065\033\040\034\073\035\050\036\061" +
    "\037\023\040\014\041\044\042\035\043\074\044\042\045" +
    "\071\046\047\047\075\050\033\051\055\052\020\053\053" +
    "\054\022\055\026\056\021\057\027\060\070\061\045\062" +
    "\036\063\057\064\072\065\025\066\066\067\037\073\024" +
    "\075\046\076\067\105\034\110\051\111\043\112\056\113" +
    "\063\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\144\010\031\020\017\021\016\022\054\023\041" +
    "\024\060\025\052\026\030\027\064\030\032\031\015\032" +
    "\065\033\040\034\073\035\050\036\061\037\023\040\014" +
    "\041\044\042\035\043\074\044\042\045\071\046\047\047" +
    "\075\050\033\051\055\052\020\053\053\054\022\055\026" +
    "\056\021\057\027\060\070\061\045\062\036\063\057\064" +
    "\072\065\025\066\066\067\037\073\024\075\046\076\067" +
    "\105\034\110\051\111\043\112\056\113\063\001\002\000" +
    "\144\010\031\020\017\021\016\022\054\023\041\024\060" +
    "\025\052\026\030\027\064\030\032\031\015\032\065\033" +
    "\040\034\073\035\050\036\061\037\023\040\014\041\044" +
    "\042\035\043\074\044\042\045\071\046\047\047\075\050" +
    "\033\051\055\052\020\053\053\054\022\055\026\056\021" +
    "\057\027\060\070\061\045\062\036\063\057\064\072\065" +
    "\025\066\066\067\037\073\024\075\046\076\067\105\034" +
    "\110\051\111\043\112\056\113\063\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\144\010\031\020" +
    "\017\021\016\022\054\023\041\024\060\025\052\026\030" +
    "\027\064\030\032\031\015\032\065\033\040\034\073\035" +
    "\050\036\061\037\023\040\014\041\044\042\035\043\074" +
    "\044\042\045\071\046\047\047\075\050\033\051\055\052" +
    "\020\053\053\054\022\055\026\056\021\057\027\060\070" +
    "\061\045\062\036\063\057\064\072\065\025\066\066\067" +
    "\037\073\024\075\046\076\067\105\034\110\051\111\043" +
    "\112\056\113\063\001\002\000\046\005\uffe0\010\101\012" +
    "\105\013\113\014\112\015\114\016\110\071\uffe0\072\uffe0" +
    "\074\uffe0\077\115\100\106\101\107\102\102\103\104\104" +
    "\103\106\uffe0\107\uffe0\001\002\000\046\005\uffe8\010\101" +
    "\012\105\013\113\014\112\015\114\016\110\071\uffe8\072" +
    "\uffe8\074\uffe8\077\uffe8\100\uffe8\101\uffe8\102\uffe8\103\uffe8" +
    "\104\uffe8\106\uffe8\107\uffe8\001\002\000\046\005\uffaa\010" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\071\uffaa" +
    "\072\uffaa\074\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103" +
    "\uffaa\104\uffaa\106\uffaa\107\uffaa\001\002\000\046\005\uffad" +
    "\010\uffad\012\uffad\013\uffad\014\uffad\015\114\016\uffad\071" +
    "\uffad\072\uffad\074\uffad\077\uffad\100\uffad\101\uffad\102\uffad" +
    "\103\uffad\104\uffad\106\uffad\107\uffad\001\002\000\046\005" +
    "\uffac\010\uffac\012\uffac\013\uffac\014\uffac\015\114\016\uffac" +
    "\071\uffac\072\uffac\074\uffac\077\uffac\100\uffac\101\uffac\102" +
    "\uffac\103\uffac\104\uffac\106\uffac\107\uffac\001\002\000\040" +
    "\010\101\012\105\013\113\014\112\015\114\016\110\072" +
    "\125\077\115\100\106\101\107\102\102\103\104\104\103" +
    "\106\100\107\116\001\002\000\144\010\031\020\017\021" +
    "\016\022\054\023\041\024\060\025\052\026\030\027\064" +
    "\030\032\031\015\032\065\033\040\034\073\035\050\036" +
    "\061\037\023\040\014\041\044\042\035\043\074\044\042" +
    "\045\071\046\047\047\075\050\033\051\055\052\020\053" +
    "\053\054\022\055\026\056\021\057\027\060\070\061\045" +
    "\062\036\063\057\064\072\065\025\066\066\067\037\073" +
    "\024\075\046\076\067\105\034\110\051\111\043\112\056" +
    "\113\063\001\002\000\040\010\101\012\105\013\113\014" +
    "\112\015\114\016\110\072\127\077\115\100\106\101\107" +
    "\102\102\103\104\104\103\106\100\107\116\001\002\000" +
    "\144\010\031\020\017\021\016\022\054\023\041\024\060" +
    "\025\052\026\030\027\064\030\032\031\015\032\065\033" +
    "\040\034\073\035\050\036\061\037\023\040\014\041\044" +
    "\042\035\043\074\044\042\045\071\046\047\047\075\050" +
    "\033\051\055\052\020\053\053\054\022\055\026\056\021" +
    "\057\027\060\070\061\045\062\036\063\057\064\072\065" +
    "\025\066\066\067\037\073\024\075\046\076\067\105\034" +
    "\110\051\111\043\112\056\113\063\001\002\000\040\010" +
    "\101\012\105\013\113\014\112\015\114\016\110\074\131" +
    "\077\115\100\106\101\107\102\102\103\104\104\103\106" +
    "\100\107\116\001\002\000\046\005\uffce\010\uffce\012\uffce" +
    "\013\uffce\014\uffce\015\uffce\016\uffce\071\uffce\072\uffce\074" +
    "\uffce\077\uffce\100\uffce\101\uffce\102\uffce\103\uffce\104\uffce" +
    "\106\uffce\107\uffce\001\002\000\046\005\uffab\010\uffab\012" +
    "\uffab\013\uffab\014\uffab\015\114\016\uffab\071\uffab\072\uffab" +
    "\074\uffab\077\uffab\100\uffab\101\uffab\102\uffab\103\uffab\104" +
    "\uffab\106\uffab\107\uffab\001\002\000\046\005\uffe6\010\101" +
    "\012\105\013\113\014\112\015\114\016\110\071\uffe6\072" +
    "\uffe6\074\uffe6\077\uffe6\100\uffe6\101\uffe6\102\uffe6\103\uffe6" +
    "\104\uffe6\106\uffe6\107\uffe6\001\002\000\046\005\uffe7\010" +
    "\101\012\105\013\113\014\112\015\114\016\110\071\uffe7" +
    "\072\uffe7\074\uffe7\077\uffe7\100\uffe7\101\uffe7\102\uffe7\103" +
    "\uffe7\104\uffe7\106\uffe7\107\uffe7\001\002\000\046\005\uffaf" +
    "\010\uffaf\012\uffaf\013\113\014\112\015\114\016\110\071" +
    "\uffaf\072\uffaf\074\uffaf\077\uffaf\100\uffaf\101\uffaf\102\uffaf" +
    "\103\uffaf\104\uffaf\106\uffaf\107\uffaf\001\002\000\046\005" +
    "\uffe4\010\101\012\105\013\113\014\112\015\114\016\110" +
    "\071\uffe4\072\uffe4\074\uffe4\077\uffe4\100\uffe4\101\uffe4\102" +
    "\uffe4\103\uffe4\104\uffe4\106\uffe4\107\uffe4\001\002\000\046" +
    "\005\uffe3\010\101\012\105\013\113\014\112\015\114\016" +
    "\110\071\uffe3\072\uffe3\074\uffe3\077\uffe3\100\uffe3\101\uffe3" +
    "\102\uffe3\103\uffe3\104\uffe3\106\uffe3\107\uffe3\001\002\000" +
    "\046\005\uffe5\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\071\uffe5\072\uffe5\074\uffe5\077\uffe5\100\uffe5\101" +
    "\uffe5\102\uffe5\103\uffe5\104\uffe5\106\uffe5\107\uffe5\001\002" +
    "\000\046\005\uffae\010\uffae\012\uffae\013\113\014\112\015" +
    "\114\016\110\071\uffae\072\uffae\074\uffae\077\uffae\100\uffae" +
    "\101\uffae\102\uffae\103\uffae\104\uffae\106\uffae\107\uffae\001" +
    "\002\000\046\005\uffe1\010\101\012\105\013\113\014\112" +
    "\015\114\016\110\071\uffe1\072\uffe1\074\uffe1\077\115\100" +
    "\106\101\107\102\102\103\104\104\103\106\uffe1\107\uffe1" +
    "\001\002\000\144\010\031\020\017\021\016\022\054\023" +
    "\041\024\060\025\052\026\030\027\064\030\032\031\015" +
    "\032\065\033\040\034\073\035\050\036\061\037\023\040" +
    "\014\041\044\042\035\043\074\044\042\045\071\046\047" +
    "\047\075\050\033\051\055\052\020\053\053\054\022\055" +
    "\026\056\021\057\027\060\070\061\045\062\036\063\057" +
    "\064\072\065\025\066\066\067\037\073\024\075\046\076" +
    "\067\105\034\110\051\111\043\112\056\113\063\001\002" +
    "\000\040\010\101\012\105\013\113\014\112\015\114\016" +
    "\110\074\145\077\115\100\106\101\107\102\102\103\104" +
    "\104\103\106\100\107\116\001\002\000\046\005\uffb0\010" +
    "\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0\071\uffb0" +
    "\072\uffb0\074\uffb0\077\uffb0\100\uffb0\101\uffb0\102\uffb0\103" +
    "\uffb0\104\uffb0\106\uffb0\107\uffb0\001\002\000\144\010\031" +
    "\020\017\021\016\022\054\023\041\024\060\025\052\026" +
    "\030\027\064\030\032\031\015\032\065\033\040\034\073" +
    "\035\050\036\061\037\023\040\014\041\044\042\035\043" +
    "\074\044\042\045\071\046\047\047\075\050\033\051\055" +
    "\052\020\053\053\054\022\055\026\056\021\057\027\060" +
    "\070\061\045\062\036\063\057\064\072\065\025\066\066" +
    "\067\037\073\024\075\046\076\067\105\034\110\051\111" +
    "\043\112\056\113\063\001\002\000\040\010\101\012\105" +
    "\013\113\014\112\015\114\016\110\072\150\077\115\100" +
    "\106\101\107\102\102\103\104\104\103\106\100\107\116" +
    "\001\002\000\144\010\031\020\017\021\016\022\054\023" +
    "\041\024\060\025\052\026\030\027\064\030\032\031\015" +
    "\032\065\033\040\034\073\035\050\036\061\037\023\040" +
    "\014\041\044\042\035\043\074\044\042\045\071\046\047" +
    "\047\075\050\033\051\055\052\020\053\053\054\022\055" +
    "\026\056\021\057\027\060\070\061\045\062\036\063\057" +
    "\064\072\065\025\066\066\067\037\073\024\075\046\076" +
    "\067\105\034\110\051\111\043\112\056\113\063\001\002" +
    "\000\040\010\101\012\105\013\113\014\112\015\114\016" +
    "\110\074\152\077\115\100\106\101\107\102\102\103\104" +
    "\104\103\106\100\107\116\001\002\000\046\005\uffb2\010" +
    "\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2\071\uffb2" +
    "\072\uffb2\074\uffb2\077\uffb2\100\uffb2\101\uffb2\102\uffb2\103" +
    "\uffb2\104\uffb2\106\uffb2\107\uffb2\001\002\000\144\010\031" +
    "\020\017\021\016\022\054\023\041\024\060\025\052\026" +
    "\030\027\064\030\032\031\015\032\065\033\040\034\073" +
    "\035\050\036\061\037\023\040\014\041\044\042\035\043" +
    "\074\044\042\045\071\046\047\047\075\050\033\051\055" +
    "\052\020\053\053\054\022\055\026\056\021\057\027\060" +
    "\070\061\045\062\036\063\057\064\072\065\025\066\066" +
    "\067\037\073\024\075\046\076\067\105\034\110\051\111" +
    "\043\112\056\113\063\001\002\000\040\010\101\012\105" +
    "\013\113\014\112\015\114\016\110\074\155\077\115\100" +
    "\106\101\107\102\102\103\104\104\103\106\100\107\116" +
    "\001\002\000\046\005\uffbb\010\uffbb\012\uffbb\013\uffbb\014" +
    "\uffbb\015\uffbb\016\uffbb\071\uffbb\072\uffbb\074\uffbb\077\uffbb" +
    "\100\uffbb\101\uffbb\102\uffbb\103\uffbb\104\uffbb\106\uffbb\107" +
    "\uffbb\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\040\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\072\160\077\115\100\106\101\107\102\102\103" +
    "\104\104\103\106\100\107\116\001\002\000\144\010\031" +
    "\020\017\021\016\022\054\023\041\024\060\025\052\026" +
    "\030\027\064\030\032\031\015\032\065\033\040\034\073" +
    "\035\050\036\061\037\023\040\014\041\044\042\035\043" +
    "\074\044\042\045\071\046\047\047\075\050\033\051\055" +
    "\052\020\053\053\054\022\055\026\056\021\057\027\060" +
    "\070\061\045\062\036\063\057\064\072\065\025\066\066" +
    "\067\037\073\024\075\046\076\067\105\034\110\051\111" +
    "\043\112\056\113\063\001\002\000\040\010\101\012\105" +
    "\013\113\014\112\015\114\016\110\074\162\077\115\100" +
    "\106\101\107\102\102\103\104\104\103\106\100\107\116" +
    "\001\002\000\046\005\uffd7\010\uffd7\012\uffd7\013\uffd7\014" +
    "\uffd7\015\uffd7\016\uffd7\071\uffd7\072\uffd7\074\uffd7\077\uffd7" +
    "\100\uffd7\101\uffd7\102\uffd7\103\uffd7\104\uffd7\106\uffd7\107" +
    "\uffd7\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\040\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\074\165\077\115\100\106\101\107\102\102\103" +
    "\104\104\103\106\100\107\116\001\002\000\046\005\uffc3" +
    "\010\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\071" +
    "\uffc3\072\uffc3\074\uffc3\077\uffc3\100\uffc3\101\uffc3\102\uffc3" +
    "\103\uffc3\104\uffc3\106\uffc3\107\uffc3\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\040\010\101\012" +
    "\105\013\113\014\112\015\114\016\110\072\170\077\115" +
    "\100\106\101\107\102\102\103\104\104\103\106\100\107" +
    "\116\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\040\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\074\172\077\115\100\106\101\107\102\102\103" +
    "\104\104\103\106\100\107\116\001\002\000\046\005\uffb9" +
    "\010\uffb9\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\071" +
    "\uffb9\072\uffb9\074\uffb9\077\uffb9\100\uffb9\101\uffb9\102\uffb9" +
    "\103\uffb9\104\uffb9\106\uffb9\107\uffb9\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\040\010\101\012" +
    "\105\013\113\014\112\015\114\016\110\074\175\077\115" +
    "\100\106\101\107\102\102\103\104\104\103\106\100\107" +
    "\116\001\002\000\046\005\uffb4\010\uffb4\012\uffb4\013\uffb4" +
    "\014\uffb4\015\uffb4\016\uffb4\071\uffb4\072\uffb4\074\uffb4\077" +
    "\uffb4\100\uffb4\101\uffb4\102\uffb4\103\uffb4\104\uffb4\106\uffb4" +
    "\107\uffb4\001\002\000\144\010\031\020\017\021\016\022" +
    "\054\023\041\024\060\025\052\026\030\027\064\030\032" +
    "\031\015\032\065\033\040\034\073\035\050\036\061\037" +
    "\023\040\014\041\044\042\035\043\074\044\042\045\071" +
    "\046\047\047\075\050\033\051\055\052\020\053\053\054" +
    "\022\055\026\056\021\057\027\060\070\061\045\062\036" +
    "\063\057\064\072\065\025\066\066\067\037\073\024\075" +
    "\046\076\067\105\034\110\051\111\043\112\056\113\063" +
    "\001\002\000\040\010\101\012\105\013\113\014\112\015" +
    "\114\016\110\074\200\077\115\100\106\101\107\102\102" +
    "\103\104\104\103\106\100\107\116\001\002\000\046\005" +
    "\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7" +
    "\071\uffb7\072\uffb7\074\uffb7\077\uffb7\100\uffb7\101\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\106\uffb7\107\uffb7\001\002\000\012" +
    "\002\ufffa\004\ufffa\017\ufffa\112\ufffa\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\040\010\101\012" +
    "\105\013\113\014\112\015\114\016\110\072\204\077\115" +
    "\100\106\101\107\102\102\103\104\104\103\106\100\107" +
    "\116\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\042\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\072\206\074\207\077\115\100\106\101\107\102" +
    "\102\103\104\104\103\106\100\107\116\001\002\000\144" +
    "\010\031\020\017\021\016\022\054\023\041\024\060\025" +
    "\052\026\030\027\064\030\032\031\015\032\065\033\040" +
    "\034\073\035\050\036\061\037\023\040\014\041\044\042" +
    "\035\043\074\044\042\045\071\046\047\047\075\050\033" +
    "\051\055\052\020\053\053\054\022\055\026\056\021\057" +
    "\027\060\070\061\045\062\036\063\057\064\072\065\025" +
    "\066\066\067\037\073\024\075\046\076\067\105\034\110" +
    "\051\111\043\112\056\113\063\001\002\000\046\005\uffdb" +
    "\010\uffdb\012\uffdb\013\uffdb\014\uffdb\015\uffdb\016\uffdb\071" +
    "\uffdb\072\uffdb\074\uffdb\077\uffdb\100\uffdb\101\uffdb\102\uffdb" +
    "\103\uffdb\104\uffdb\106\uffdb\107\uffdb\001\002\000\040\010" +
    "\101\012\105\013\113\014\112\015\114\016\110\074\211" +
    "\077\115\100\106\101\107\102\102\103\104\104\103\106" +
    "\100\107\116\001\002\000\046\005\uffda\010\uffda\012\uffda" +
    "\013\uffda\014\uffda\015\uffda\016\uffda\071\uffda\072\uffda\074" +
    "\uffda\077\uffda\100\uffda\101\uffda\102\uffda\103\uffda\104\uffda" +
    "\106\uffda\107\uffda\001\002\000\144\010\031\020\017\021" +
    "\016\022\054\023\041\024\060\025\052\026\030\027\064" +
    "\030\032\031\015\032\065\033\040\034\073\035\050\036" +
    "\061\037\023\040\014\041\044\042\035\043\074\044\042" +
    "\045\071\046\047\047\075\050\033\051\055\052\020\053" +
    "\053\054\022\055\026\056\021\057\027\060\070\061\045" +
    "\062\036\063\057\064\072\065\025\066\066\067\037\073" +
    "\024\075\046\076\067\105\034\110\051\111\043\112\056" +
    "\113\063\001\002\000\040\010\101\012\105\013\113\014" +
    "\112\015\114\016\110\074\214\077\115\100\106\101\107" +
    "\102\102\103\104\104\103\106\100\107\116\001\002\000" +
    "\046\005\uffc1\010\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\071\uffc1\072\uffc1\074\uffc1\077\uffc1\100\uffc1\101" +
    "\uffc1\102\uffc1\103\uffc1\104\uffc1\106\uffc1\107\uffc1\001\002" +
    "\000\144\010\031\020\017\021\016\022\054\023\041\024" +
    "\060\025\052\026\030\027\064\030\032\031\015\032\065" +
    "\033\040\034\073\035\050\036\061\037\023\040\014\041" +
    "\044\042\035\043\074\044\042\045\071\046\047\047\075" +
    "\050\033\051\055\052\020\053\053\054\022\055\026\056" +
    "\021\057\027\060\070\061\045\062\036\063\057\064\072" +
    "\065\025\066\066\067\037\073\024\075\046\076\067\105" +
    "\034\110\051\111\043\112\056\113\063\001\002\000\040" +
    "\010\101\012\105\013\113\014\112\015\114\016\110\074" +
    "\217\077\115\100\106\101\107\102\102\103\104\104\103" +
    "\106\100\107\116\001\002\000\046\005\uffbc\010\uffbc\012" +
    "\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\071\uffbc\072\uffbc" +
    "\074\uffbc\077\uffbc\100\uffbc\101\uffbc\102\uffbc\103\uffbc\104" +
    "\uffbc\106\uffbc\107\uffbc\001\002\000\144\010\031\020\017" +
    "\021\016\022\054\023\041\024\060\025\052\026\030\027" +
    "\064\030\032\031\015\032\065\033\040\034\073\035\050" +
    "\036\061\037\023\040\014\041\044\042\035\043\074\044" +
    "\042\045\071\046\047\047\075\050\033\051\055\052\020" +
    "\053\053\054\022\055\026\056\021\057\027\060\070\061" +
    "\045\062\036\063\057\064\072\065\025\066\066\067\037" +
    "\073\024\075\046\076\067\105\034\110\051\111\043\112" +
    "\056\113\063\001\002\000\040\010\101\012\105\013\113" +
    "\014\112\015\114\016\110\072\222\077\115\100\106\101" +
    "\107\102\102\103\104\104\103\106\100\107\116\001\002" +
    "\000\144\010\031\020\017\021\016\022\054\023\041\024" +
    "\060\025\052\026\030\027\064\030\032\031\015\032\065" +
    "\033\040\034\073\035\050\036\061\037\023\040\014\041" +
    "\044\042\035\043\074\044\042\045\071\046\047\047\075" +
    "\050\033\051\055\052\020\053\053\054\022\055\026\056" +
    "\021\057\027\060\070\061\045\062\036\063\057\064\072" +
    "\065\025\066\066\067\037\073\024\075\046\076\067\105" +
    "\034\110\051\111\043\112\056\113\063\001\002\000\040" +
    "\010\101\012\105\013\113\014\112\015\114\016\110\072" +
    "\224\077\115\100\106\101\107\102\102\103\104\104\103" +
    "\106\100\107\116\001\002\000\144\010\031\020\017\021" +
    "\016\022\054\023\041\024\060\025\052\026\030\027\064" +
    "\030\032\031\015\032\065\033\040\034\073\035\050\036" +
    "\061\037\023\040\014\041\044\042\035\043\074\044\042" +
    "\045\071\046\047\047\075\050\033\051\055\052\020\053" +
    "\053\054\022\055\026\056\021\057\027\060\070\061\045" +
    "\062\036\063\057\064\072\065\025\066\066\067\037\073" +
    "\024\075\046\076\067\105\034\110\051\111\043\112\056" +
    "\113\063\001\002\000\042\010\101\012\105\013\113\014" +
    "\112\015\114\016\110\072\226\074\227\077\115\100\106" +
    "\101\107\102\102\103\104\104\103\106\100\107\116\001" +
    "\002\000\144\010\031\020\017\021\016\022\054\023\041" +
    "\024\060\025\052\026\030\027\064\030\032\031\015\032" +
    "\065\033\040\034\073\035\050\036\061\037\023\040\014" +
    "\041\044\042\035\043\074\044\042\045\071\046\047\047" +
    "\075\050\033\051\055\052\020\053\053\054\022\055\026" +
    "\056\021\057\027\060\070\061\045\062\036\063\057\064" +
    "\072\065\025\066\066\067\037\073\024\075\046\076\067" +
    "\105\034\110\051\111\043\112\056\113\063\001\002\000" +
    "\046\005\uffcc\010\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc" +
    "\016\uffcc\071\uffcc\072\uffcc\074\uffcc\077\uffcc\100\uffcc\101" +
    "\uffcc\102\uffcc\103\uffcc\104\uffcc\106\uffcc\107\uffcc\001\002" +
    "\000\040\010\101\012\105\013\113\014\112\015\114\016" +
    "\110\074\231\077\115\100\106\101\107\102\102\103\104" +
    "\104\103\106\100\107\116\001\002\000\046\005\uffcb\010" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\071\uffcb" +
    "\072\uffcb\074\uffcb\077\uffcb\100\uffcb\101\uffcb\102\uffcb\103" +
    "\uffcb\104\uffcb\106\uffcb\107\uffcb\001\002\000\144\010\031" +
    "\020\017\021\016\022\054\023\041\024\060\025\052\026" +
    "\030\027\064\030\032\031\015\032\065\033\040\034\073" +
    "\035\050\036\061\037\023\040\014\041\044\042\035\043" +
    "\074\044\042\045\071\046\047\047\075\050\033\051\055" +
    "\052\020\053\053\054\022\055\026\056\021\057\027\060" +
    "\070\061\045\062\036\063\057\064\072\065\025\066\066" +
    "\067\037\073\024\075\046\076\067\105\034\110\051\111" +
    "\043\112\056\113\063\001\002\000\040\010\101\012\105" +
    "\013\113\014\112\015\114\016\110\074\234\077\115\100" +
    "\106\101\107\102\102\103\104\104\103\106\100\107\116" +
    "\001\002\000\046\005\uffc4\010\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\071\uffc4\072\uffc4\074\uffc4\077\uffc4" +
    "\100\uffc4\101\uffc4\102\uffc4\103\uffc4\104\uffc4\106\uffc4\107" +
    "\uffc4\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\040\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\072\237\077\115\100\106\101\107\102\102\103" +
    "\104\104\103\106\100\107\116\001\002\000\144\010\031" +
    "\020\017\021\016\022\054\023\041\024\060\025\052\026" +
    "\030\027\064\030\032\031\015\032\065\033\040\034\073" +
    "\035\050\036\061\037\023\040\014\041\044\042\035\043" +
    "\074\044\042\045\071\046\047\047\075\050\033\051\055" +
    "\052\020\053\053\054\022\055\026\056\021\057\027\060" +
    "\070\061\045\062\036\063\057\064\072\065\025\066\066" +
    "\067\037\073\024\075\046\076\067\105\034\110\051\111" +
    "\043\112\056\113\063\001\002\000\040\010\101\012\105" +
    "\013\113\014\112\015\114\016\110\074\241\077\115\100" +
    "\106\101\107\102\102\103\104\104\103\106\100\107\116" +
    "\001\002\000\046\005\uffde\010\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\071\uffde\072\uffde\074\uffde\077\uffde" +
    "\100\uffde\101\uffde\102\uffde\103\uffde\104\uffde\106\uffde\107" +
    "\uffde\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\040\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\074\244\077\115\100\106\101\107\102\102\103" +
    "\104\104\103\106\100\107\116\001\002\000\046\005\uffbf" +
    "\010\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\071" +
    "\uffbf\072\uffbf\074\uffbf\077\uffbf\100\uffbf\101\uffbf\102\uffbf" +
    "\103\uffbf\104\uffbf\106\uffbf\107\uffbf\001\002\000\004\112" +
    "\246\001\002\000\004\074\247\001\002\000\046\005\uffb1" +
    "\010\uffb1\012\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\071" +
    "\uffb1\072\uffb1\074\uffb1\077\uffb1\100\uffb1\101\uffb1\102\uffb1" +
    "\103\uffb1\104\uffb1\106\uffb1\107\uffb1\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\040\010\101\012" +
    "\105\013\113\014\112\015\114\016\110\072\252\077\115" +
    "\100\106\101\107\102\102\103\104\104\103\106\100\107" +
    "\116\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\040\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\072\254\077\115\100\106\101\107\102\102\103" +
    "\104\104\103\106\100\107\116\001\002\000\144\010\031" +
    "\020\017\021\016\022\054\023\041\024\060\025\052\026" +
    "\030\027\064\030\032\031\015\032\065\033\040\034\073" +
    "\035\050\036\061\037\023\040\014\041\044\042\035\043" +
    "\074\044\042\045\071\046\047\047\075\050\033\051\055" +
    "\052\020\053\053\054\022\055\026\056\021\057\027\060" +
    "\070\061\045\062\036\063\057\064\072\065\025\066\066" +
    "\067\037\073\024\075\046\076\067\105\034\110\051\111" +
    "\043\112\056\113\063\001\002\000\040\010\101\012\105" +
    "\013\113\014\112\015\114\016\110\074\256\077\115\100" +
    "\106\101\107\102\102\103\104\104\103\106\100\107\116" +
    "\001\002\000\046\005\uffd8\010\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\071\uffd8\072\uffd8\074\uffd8\077\uffd8" +
    "\100\uffd8\101\uffd8\102\uffd8\103\uffd8\104\uffd8\106\uffd8\107" +
    "\uffd8\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\040\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\074\261\077\115\100\106\101\107\102\102\103" +
    "\104\104\103\106\100\107\116\001\002\000\046\005\uffbe" +
    "\010\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\071" +
    "\uffbe\072\uffbe\074\uffbe\077\uffbe\100\uffbe\101\uffbe\102\uffbe" +
    "\103\uffbe\104\uffbe\106\uffbe\107\uffbe\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\040\010\101\012" +
    "\105\013\113\014\112\015\114\016\110\072\264\077\115" +
    "\100\106\101\107\102\102\103\104\104\103\106\100\107" +
    "\116\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\040\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\074\266\077\115\100\106\101\107\102\102\103" +
    "\104\104\103\106\100\107\116\001\002\000\046\005\uffdf" +
    "\010\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf\071" +
    "\uffdf\072\uffdf\074\uffdf\077\uffdf\100\uffdf\101\uffdf\102\uffdf" +
    "\103\uffdf\104\uffdf\106\uffdf\107\uffdf\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\040\010\101\012" +
    "\105\013\113\014\112\015\114\016\110\072\271\077\115" +
    "\100\106\101\107\102\102\103\104\104\103\106\100\107" +
    "\116\001\002\000\144\010\031\020\017\021\016\022\054" +
    "\023\041\024\060\025\052\026\030\027\064\030\032\031" +
    "\015\032\065\033\040\034\073\035\050\036\061\037\023" +
    "\040\014\041\044\042\035\043\074\044\042\045\071\046" +
    "\047\047\075\050\033\051\055\052\020\053\053\054\022" +
    "\055\026\056\021\057\027\060\070\061\045\062\036\063" +
    "\057\064\072\065\025\066\066\067\037\073\024\075\046" +
    "\076\067\105\034\110\051\111\043\112\056\113\063\001" +
    "\002\000\040\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\074\273\077\115\100\106\101\107\102\102\103" +
    "\104\104\103\106\100\107\116\001\002\000\046\005\uffd9" +
    "\010\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\071" +
    "\uffd9\072\uffd9\074\uffd9\077\uffd9\100\uffd9\101\uffd9\102\uffd9" +
    "\103\uffd9\104\uffd9\106\uffd9\107\uffd9\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\040\010\101\012" +
    "\105\013\113\014\112\015\114\016\110\074\276\077\115" +
    "\100\106\101\107\102\102\103\104\104\103\106\100\107" +
    "\116\001\002\000\046\005\uffc2\010\uffc2\012\uffc2\013\uffc2" +
    "\014\uffc2\015\uffc2\016\uffc2\071\uffc2\072\uffc2\074\uffc2\077" +
    "\uffc2\100\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\106\uffc2" +
    "\107\uffc2\001\002\000\144\010\031\020\017\021\016\022" +
    "\054\023\041\024\060\025\052\026\030\027\064\030\032" +
    "\031\015\032\065\033\040\034\073\035\050\036\061\037" +
    "\023\040\014\041\044\042\035\043\074\044\042\045\071" +
    "\046\047\047\075\050\033\051\055\052\020\053\053\054" +
    "\022\055\026\056\021\057\027\060\070\061\045\062\036" +
    "\063\057\064\072\065\025\066\066\067\037\073\024\075" +
    "\046\076\067\105\034\110\051\111\043\112\056\113\063" +
    "\001\002\000\040\010\101\012\105\013\113\014\112\015" +
    "\114\016\110\072\301\077\115\100\106\101\107\102\102" +
    "\103\104\104\103\106\100\107\116\001\002\000\144\010" +
    "\031\020\017\021\016\022\054\023\041\024\060\025\052" +
    "\026\030\027\064\030\032\031\015\032\065\033\040\034" +
    "\073\035\050\036\061\037\023\040\014\041\044\042\035" +
    "\043\074\044\042\045\071\046\047\047\075\050\033\051" +
    "\055\052\020\053\053\054\022\055\026\056\021\057\027" +
    "\060\070\061\045\062\036\063\057\064\072\065\025\066" +
    "\066\067\037\073\024\075\046\076\067\105\034\110\051" +
    "\111\043\112\056\113\063\001\002\000\040\010\101\012" +
    "\105\013\113\014\112\015\114\016\110\074\303\077\115" +
    "\100\106\101\107\102\102\103\104\104\103\106\100\107" +
    "\116\001\002\000\046\005\uffb3\010\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\071\uffb3\072\uffb3\074\uffb3\077" +
    "\uffb3\100\uffb3\101\uffb3\102\uffb3\103\uffb3\104\uffb3\106\uffb3" +
    "\107\uffb3\001\002\000\144\010\031\020\017\021\016\022" +
    "\054\023\041\024\060\025\052\026\030\027\064\030\032" +
    "\031\015\032\065\033\040\034\073\035\050\036\061\037" +
    "\023\040\014\041\044\042\035\043\074\044\042\045\071" +
    "\046\047\047\075\050\033\051\055\052\020\053\053\054" +
    "\022\055\026\056\021\057\027\060\070\061\045\062\036" +
    "\063\057\064\072\065\025\066\066\067\037\073\024\075" +
    "\046\076\067\105\034\110\051\111\043\112\056\113\063" +
    "\001\002\000\040\010\101\012\105\013\113\014\112\015" +
    "\114\016\110\074\306\077\115\100\106\101\107\102\102" +
    "\103\104\104\103\106\100\107\116\001\002\000\046\005" +
    "\uffb8\010\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8" +
    "\071\uffb8\072\uffb8\074\uffb8\077\uffb8\100\uffb8\101\uffb8\102" +
    "\uffb8\103\uffb8\104\uffb8\106\uffb8\107\uffb8\001\002\000\144" +
    "\010\031\020\017\021\016\022\054\023\041\024\060\025" +
    "\052\026\030\027\064\030\032\031\015\032\065\033\040" +
    "\034\073\035\050\036\061\037\023\040\014\041\044\042" +
    "\035\043\074\044\042\045\071\046\047\047\075\050\033" +
    "\051\055\052\020\053\053\054\022\055\026\056\021\057" +
    "\027\060\070\061\045\062\036\063\057\064\072\065\025" +
    "\066\066\067\037\073\024\075\046\076\067\105\034\110" +
    "\051\111\043\112\056\113\063\001\002\000\040\010\101" +
    "\012\105\013\113\014\112\015\114\016\110\074\311\077" +
    "\115\100\106\101\107\102\102\103\104\104\103\106\100" +
    "\107\116\001\002\000\046\005\uffc0\010\uffc0\012\uffc0\013" +
    "\uffc0\014\uffc0\015\uffc0\016\uffc0\071\uffc0\072\uffc0\074\uffc0" +
    "\077\uffc0\100\uffc0\101\uffc0\102\uffc0\103\uffc0\104\uffc0\106" +
    "\uffc0\107\uffc0\001\002\000\144\010\031\020\017\021\016" +
    "\022\054\023\041\024\060\025\052\026\030\027\064\030" +
    "\032\031\015\032\065\033\040\034\073\035\050\036\061" +
    "\037\023\040\014\041\044\042\035\043\074\044\042\045" +
    "\071\046\047\047\075\050\033\051\055\052\020\053\053" +
    "\054\022\055\026\056\021\057\027\060\070\061\045\062" +
    "\036\063\057\064\072\065\025\066\066\067\037\073\024" +
    "\075\046\076\067\105\034\110\051\111\043\112\056\113" +
    "\063\001\002\000\040\010\101\012\105\013\113\014\112" +
    "\015\114\016\110\074\314\077\115\100\106\101\107\102" +
    "\102\103\104\104\103\106\100\107\116\001\002\000\046" +
    "\005\uffcf\010\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016" +
    "\uffcf\071\uffcf\072\uffcf\074\uffcf\077\uffcf\100\uffcf\101\uffcf" +
    "\102\uffcf\103\uffcf\104\uffcf\106\uffcf\107\uffcf\001\002\000" +
    "\046\005\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\071\uffe2\072\uffe2\074\uffe2\077\uffe2\100\uffe2\101" +
    "\uffe2\102\uffe2\103\uffe2\104\uffe2\106\uffe2\107\uffe2\001\002" +
    "\000\144\010\031\020\017\021\016\022\054\023\041\024" +
    "\060\025\052\026\030\027\064\030\032\031\015\032\065" +
    "\033\040\034\073\035\050\036\061\037\023\040\014\041" +
    "\044\042\035\043\074\044\042\045\071\046\047\047\075" +
    "\050\033\051\055\052\020\053\053\054\022\055\026\056" +
    "\021\057\027\060\070\061\045\062\036\063\057\064\072" +
    "\065\025\066\066\067\037\073\024\075\046\076\067\105" +
    "\034\110\051\111\043\112\056\113\063\001\002\000\040" +
    "\010\101\012\105\013\113\014\112\015\114\016\110\072" +
    "\320\077\115\100\106\101\107\102\102\103\104\104\103" +
    "\106\100\107\116\001\002\000\144\010\031\020\017\021" +
    "\016\022\054\023\041\024\060\025\052\026\030\027\064" +
    "\030\032\031\015\032\065\033\040\034\073\035\050\036" +
    "\061\037\023\040\014\041\044\042\035\043\074\044\042" +
    "\045\071\046\047\047\075\050\033\051\055\052\020\053" +
    "\053\054\022\055\026\056\021\057\027\060\070\061\045" +
    "\062\036\063\057\064\072\065\025\066\066\067\037\073" +
    "\024\075\046\076\067\105\034\110\051\111\043\112\056" +
    "\113\063\001\002\000\040\010\101\012\105\013\113\014" +
    "\112\015\114\016\110\072\322\077\115\100\106\101\107" +
    "\102\102\103\104\104\103\106\100\107\116\001\002\000" +
    "\144\010\031\020\017\021\016\022\054\023\041\024\060" +
    "\025\052\026\030\027\064\030\032\031\015\032\065\033" +
    "\040\034\073\035\050\036\061\037\023\040\014\041\044" +
    "\042\035\043\074\044\042\045\071\046\047\047\075\050" +
    "\033\051\055\052\020\053\053\054\022\055\026\056\021" +
    "\057\027\060\070\061\045\062\036\063\057\064\072\065" +
    "\025\066\066\067\037\073\024\075\046\076\067\105\034" +
    "\110\051\111\043\112\056\113\063\001\002\000\040\010" +
    "\101\012\105\013\113\014\112\015\114\016\110\074\324" +
    "\077\115\100\106\101\107\102\102\103\104\104\103\106" +
    "\100\107\116\001\002\000\046\005\uffcd\010\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\015\uffcd\016\uffcd\071\uffcd\072\uffcd\074" +
    "\uffcd\077\uffcd\100\uffcd\101\uffcd\102\uffcd\103\uffcd\104\uffcd" +
    "\106\uffcd\107\uffcd\001\002\000\144\010\031\020\017\021" +
    "\016\022\054\023\041\024\060\025\052\026\030\027\064" +
    "\030\032\031\015\032\065\033\040\034\073\035\050\036" +
    "\061\037\023\040\014\041\044\042\035\043\074\044\042" +
    "\045\071\046\047\047\075\050\033\051\055\052\020\053" +
    "\053\054\022\055\026\056\021\057\027\060\070\061\045" +
    "\062\036\063\057\064\072\065\025\066\066\067\037\073" +
    "\024\075\046\076\067\105\034\110\051\111\043\112\056" +
    "\113\063\001\002\000\040\010\101\012\105\013\113\014" +
    "\112\015\114\016\110\074\327\077\115\100\106\101\107" +
    "\102\102\103\104\104\103\106\100\107\116\001\002\000" +
    "\046\005\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\016\uffb6\071\uffb6\072\uffb6\074\uffb6\077\uffb6\100\uffb6\101" +
    "\uffb6\102\uffb6\103\uffb6\104\uffb6\106\uffb6\107\uffb6\001\002" +
    "\000\046\005\uffe9\010\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\071\uffe9\072\uffe9\074\uffe9\077\uffe9\100\uffe9" +
    "\101\uffe9\102\uffe9\103\uffe9\104\uffe9\106\uffe9\107\uffe9\001" +
    "\002\000\144\010\031\020\017\021\016\022\054\023\041" +
    "\024\060\025\052\026\030\027\064\030\032\031\015\032" +
    "\065\033\040\034\073\035\050\036\061\037\023\040\014" +
    "\041\044\042\035\043\074\044\042\045\071\046\047\047" +
    "\075\050\033\051\055\052\020\053\053\054\022\055\026" +
    "\056\021\057\027\060\070\061\045\062\036\063\057\064" +
    "\072\065\025\066\066\067\037\073\024\075\046\076\067" +
    "\105\034\110\051\111\043\112\056\113\063\001\002\000" +
    "\040\010\101\012\105\013\113\014\112\015\114\016\110" +
    "\074\333\077\115\100\106\101\107\102\102\103\104\104" +
    "\103\106\100\107\116\001\002\000\046\005\uffbd\010\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\071\uffbd\072" +
    "\uffbd\074\uffbd\077\uffbd\100\uffbd\101\uffbd\102\uffbd\103\uffbd" +
    "\104\uffbd\106\uffbd\107\uffbd\001\002\000\144\010\031\020" +
    "\017\021\016\022\054\023\041\024\060\025\052\026\030" +
    "\027\064\030\032\031\015\032\065\033\040\034\073\035" +
    "\050\036\061\037\023\040\014\041\044\042\035\043\074" +
    "\044\042\045\071\046\047\047\075\050\033\051\055\052" +
    "\020\053\053\054\022\055\026\056\021\057\027\060\070" +
    "\061\045\062\036\063\057\064\072\065\025\066\066\067" +
    "\037\073\024\075\046\076\067\105\034\110\051\111\043" +
    "\112\056\113\063\001\002\000\040\010\101\012\105\013" +
    "\113\014\112\015\114\016\110\074\336\077\115\100\106" +
    "\101\107\102\102\103\104\104\103\106\100\107\116\001" +
    "\002\000\046\005\uffc5\010\uffc5\012\uffc5\013\uffc5\014\uffc5" +
    "\015\uffc5\016\uffc5\071\uffc5\072\uffc5\074\uffc5\077\uffc5\100" +
    "\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\106\uffc5\107\uffc5" +
    "\001\002\000\144\010\031\020\017\021\016\022\054\023" +
    "\041\024\060\025\052\026\030\027\064\030\032\031\015" +
    "\032\065\033\040\034\073\035\050\036\061\037\023\040" +
    "\014\041\044\042\035\043\074\044\042\045\071\046\047" +
    "\047\075\050\033\051\055\052\020\053\053\054\022\055" +
    "\026\056\021\057\027\060\070\061\045\062\036\063\057" +
    "\064\072\065\025\066\066\067\037\073\024\075\046\076" +
    "\067\105\034\110\051\111\043\112\056\113\063\001\002" +
    "\000\040\010\101\012\105\013\113\014\112\015\114\016" +
    "\110\072\341\077\115\100\106\101\107\102\102\103\104" +
    "\104\103\106\100\107\116\001\002\000\144\010\031\020" +
    "\017\021\016\022\054\023\041\024\060\025\052\026\030" +
    "\027\064\030\032\031\015\032\065\033\040\034\073\035" +
    "\050\036\061\037\023\040\014\041\044\042\035\043\074" +
    "\044\042\045\071\046\047\047\075\050\033\051\055\052" +
    "\020\053\053\054\022\055\026\056\021\057\027\060\070" +
    "\061\045\062\036\063\057\064\072\065\025\066\066\067" +
    "\037\073\024\075\046\076\067\105\034\110\051\111\043" +
    "\112\056\113\063\001\002\000\040\010\101\012\105\013" +
    "\113\014\112\015\114\016\110\074\343\077\115\100\106" +
    "\101\107\102\102\103\104\104\103\106\100\107\116\001" +
    "\002\000\046\005\uffd6\010\uffd6\012\uffd6\013\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\071\uffd6\072\uffd6\074\uffd6\077\uffd6\100" +
    "\uffd6\101\uffd6\102\uffd6\103\uffd6\104\uffd6\106\uffd6\107\uffd6" +
    "\001\002\000\144\010\031\020\017\021\016\022\054\023" +
    "\041\024\060\025\052\026\030\027\064\030\032\031\015" +
    "\032\065\033\040\034\073\035\050\036\061\037\023\040" +
    "\014\041\044\042\035\043\074\044\042\045\071\046\047" +
    "\047\075\050\033\051\055\052\020\053\053\054\022\055" +
    "\026\056\021\057\027\060\070\061\045\062\036\063\057" +
    "\064\072\065\025\066\066\067\037\073\024\075\046\076" +
    "\067\105\034\110\051\111\043\112\056\113\063\001\002" +
    "\000\040\010\101\012\105\013\113\014\112\015\114\016" +
    "\110\072\346\077\115\100\106\101\107\102\102\103\104" +
    "\104\103\106\100\107\116\001\002\000\144\010\031\020" +
    "\017\021\016\022\054\023\041\024\060\025\052\026\030" +
    "\027\064\030\032\031\015\032\065\033\040\034\073\035" +
    "\050\036\061\037\023\040\014\041\044\042\035\043\074" +
    "\044\042\045\071\046\047\047\075\050\033\051\055\052" +
    "\020\053\053\054\022\055\026\056\021\057\027\060\070" +
    "\061\045\062\036\063\057\064\072\065\025\066\066\067" +
    "\037\073\024\075\046\076\067\105\034\110\051\111\043" +
    "\112\056\113\063\001\002\000\040\010\101\012\105\013" +
    "\113\014\112\015\114\016\110\074\350\077\115\100\106" +
    "\101\107\102\102\103\104\104\103\106\100\107\116\001" +
    "\002\000\046\005\uffba\010\uffba\012\uffba\013\uffba\014\uffba" +
    "\015\uffba\016\uffba\071\uffba\072\uffba\074\uffba\077\uffba\100" +
    "\uffba\101\uffba\102\uffba\103\uffba\104\uffba\106\uffba\107\uffba" +
    "\001\002\000\040\010\101\012\105\013\113\014\112\015" +
    "\114\016\110\074\352\077\115\100\106\101\107\102\102" +
    "\103\104\104\103\106\100\107\116\001\002\000\046\005" +
    "\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\071\ufff0\072\ufff0\074\ufff0\077\ufff0\100\ufff0\101\ufff0\102" +
    "\ufff0\103\ufff0\104\ufff0\106\ufff0\107\ufff0\001\002\000\144" +
    "\010\031\020\017\021\016\022\054\023\041\024\060\025" +
    "\052\026\030\027\064\030\032\031\015\032\065\033\040" +
    "\034\073\035\050\036\061\037\023\040\014\041\044\042" +
    "\035\043\074\044\042\045\071\046\047\047\075\050\033" +
    "\051\055\052\020\053\053\054\022\055\026\056\021\057" +
    "\027\060\070\061\045\062\036\063\057\064\072\065\025" +
    "\066\066\067\037\073\024\075\046\076\067\105\034\110" +
    "\051\111\043\112\056\113\063\001\002\000\040\010\101" +
    "\012\105\013\113\014\112\015\114\016\110\074\355\077" +
    "\115\100\106\101\107\102\102\103\104\104\103\106\100" +
    "\107\116\001\002\000\046\005\uffd1\010\uffd1\012\uffd1\013" +
    "\uffd1\014\uffd1\015\uffd1\016\uffd1\071\uffd1\072\uffd1\074\uffd1" +
    "\077\uffd1\100\uffd1\101\uffd1\102\uffd1\103\uffd1\104\uffd1\106" +
    "\uffd1\107\uffd1\001\002\000\144\010\031\020\017\021\016" +
    "\022\054\023\041\024\060\025\052\026\030\027\064\030" +
    "\032\031\015\032\065\033\040\034\073\035\050\036\061" +
    "\037\023\040\014\041\044\042\035\043\074\044\042\045" +
    "\071\046\047\047\075\050\033\051\055\052\020\053\053" +
    "\054\022\055\026\056\021\057\027\060\070\061\045\062" +
    "\036\063\057\064\072\065\025\066\066\067\037\073\024" +
    "\075\046\076\067\105\034\110\051\111\043\112\056\113" +
    "\063\001\002\000\040\010\101\012\105\013\113\014\112" +
    "\015\114\016\110\072\360\077\115\100\106\101\107\102" +
    "\102\103\104\104\103\106\100\107\116\001\002\000\144" +
    "\010\031\020\017\021\016\022\054\023\041\024\060\025" +
    "\052\026\030\027\064\030\032\031\015\032\065\033\040" +
    "\034\073\035\050\036\061\037\023\040\014\041\044\042" +
    "\035\043\074\044\042\045\071\046\047\047\075\050\033" +
    "\051\055\052\020\053\053\054\022\055\026\056\021\057" +
    "\027\060\070\061\045\062\036\063\057\064\072\065\025" +
    "\066\066\067\037\073\024\075\046\076\067\105\034\110" +
    "\051\111\043\112\056\113\063\001\002\000\042\010\101" +
    "\012\105\013\113\014\112\015\114\016\110\072\362\074" +
    "\363\077\115\100\106\101\107\102\102\103\104\104\103" +
    "\106\100\107\116\001\002\000\144\010\031\020\017\021" +
    "\016\022\054\023\041\024\060\025\052\026\030\027\064" +
    "\030\032\031\015\032\065\033\040\034\073\035\050\036" +
    "\061\037\023\040\014\041\044\042\035\043\074\044\042" +
    "\045\071\046\047\047\075\050\033\051\055\052\020\053" +
    "\053\054\022\055\026\056\021\057\027\060\070\061\045" +
    "\062\036\063\057\064\072\065\025\066\066\067\037\073" +
    "\024\075\046\076\067\105\034\110\051\111\043\112\056" +
    "\113\063\001\002\000\046\005\uffd5\010\uffd5\012\uffd5\013" +
    "\uffd5\014\uffd5\015\uffd5\016\uffd5\071\uffd5\072\uffd5\074\uffd5" +
    "\077\uffd5\100\uffd5\101\uffd5\102\uffd5\103\uffd5\104\uffd5\106" +
    "\uffd5\107\uffd5\001\002\000\042\010\101\012\105\013\113" +
    "\014\112\015\114\016\110\072\365\074\366\077\115\100" +
    "\106\101\107\102\102\103\104\104\103\106\100\107\116" +
    "\001\002\000\144\010\031\020\017\021\016\022\054\023" +
    "\041\024\060\025\052\026\030\027\064\030\032\031\015" +
    "\032\065\033\040\034\073\035\050\036\061\037\023\040" +
    "\014\041\044\042\035\043\074\044\042\045\071\046\047" +
    "\047\075\050\033\051\055\052\020\053\053\054\022\055" +
    "\026\056\021\057\027\060\070\061\045\062\036\063\057" +
    "\064\072\065\025\066\066\067\037\073\024\075\046\076" +
    "\067\105\034\110\051\111\043\112\056\113\063\001\002" +
    "\000\046\005\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\071\uffd4\072\uffd4\074\uffd4\077\uffd4\100\uffd4" +
    "\101\uffd4\102\uffd4\103\uffd4\104\uffd4\106\uffd4\107\uffd4\001" +
    "\002\000\042\010\101\012\105\013\113\014\112\015\114" +
    "\016\110\072\370\074\371\077\115\100\106\101\107\102" +
    "\102\103\104\104\103\106\100\107\116\001\002\000\144" +
    "\010\031\020\017\021\016\022\054\023\041\024\060\025" +
    "\052\026\030\027\064\030\032\031\015\032\065\033\040" +
    "\034\073\035\050\036\061\037\023\040\014\041\044\042" +
    "\035\043\074\044\042\045\071\046\047\047\075\050\033" +
    "\051\055\052\020\053\053\054\022\055\026\056\021\057" +
    "\027\060\070\061\045\062\036\063\057\064\072\065\025" +
    "\066\066\067\037\073\024\075\046\076\067\105\034\110" +
    "\051\111\043\112\056\113\063\001\002\000\046\005\uffd3" +
    "\010\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\016\uffd3\071" +
    "\uffd3\072\uffd3\074\uffd3\077\uffd3\100\uffd3\101\uffd3\102\uffd3" +
    "\103\uffd3\104\uffd3\106\uffd3\107\uffd3\001\002\000\040\010" +
    "\101\012\105\013\113\014\112\015\114\016\110\074\373" +
    "\077\115\100\106\101\107\102\102\103\104\104\103\106" +
    "\100\107\116\001\002\000\046\005\uffd2\010\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\071\uffd2\072\uffd2\074" +
    "\uffd2\077\uffd2\100\uffd2\101\uffd2\102\uffd2\103\uffd2\104\uffd2" +
    "\106\uffd2\107\uffd2\001\002\000\144\010\031\020\017\021" +
    "\016\022\054\023\041\024\060\025\052\026\030\027\064" +
    "\030\032\031\015\032\065\033\040\034\073\035\050\036" +
    "\061\037\023\040\014\041\044\042\035\043\074\044\042" +
    "\045\071\046\047\047\075\050\033\051\055\052\020\053" +
    "\053\054\022\055\026\056\021\057\027\060\070\061\045" +
    "\062\036\063\057\064\072\065\025\066\066\067\037\073" +
    "\024\075\046\076\067\105\034\110\051\111\043\112\056" +
    "\113\063\001\002\000\042\010\101\012\105\013\113\014" +
    "\112\015\114\016\110\072\376\074\377\077\115\100\106" +
    "\101\107\102\102\103\104\104\103\106\100\107\116\001" +
    "\002\000\144\010\031\020\017\021\016\022\054\023\041" +
    "\024\060\025\052\026\030\027\064\030\032\031\015\032" +
    "\065\033\040\034\073\035\050\036\061\037\023\040\014" +
    "\041\044\042\035\043\074\044\042\045\071\046\047\047" +
    "\075\050\033\051\055\052\020\053\053\054\022\055\026" +
    "\056\021\057\027\060\070\061\045\062\036\063\057\064" +
    "\072\065\025\066\066\067\037\073\024\075\046\076\067" +
    "\105\034\110\051\111\043\112\056\113\u0101\001\002\000" +
    "\046\005\uffca\010\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\071\uffca\072\uffca\074\uffca\077\uffca\100\uffca\101" +
    "\uffca\102\uffca\103\uffca\104\uffca\106\uffca\107\uffca\001\002" +
    "\000\040\010\101\012\105\013\113\014\112\015\114\016" +
    "\110\074\u0103\077\115\100\106\101\107\102\102\103\104" +
    "\104\103\106\100\107\116\001\002\000\040\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\015\uffee\016\uffee\074\u0102\077\uffee" +
    "\100\uffee\101\uffee\102\uffee\103\uffee\104\uffee\106\uffee\107" +
    "\uffee\001\002\000\046\005\uffc8\010\uffc8\012\uffc8\013\uffc8" +
    "\014\uffc8\015\uffc8\016\uffc8\071\uffc8\072\uffc8\074\uffc8\077" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\106\uffc8" +
    "\107\uffc8\001\002\000\046\005\uffc9\010\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\071\uffc9\072\uffc9\074\uffc9" +
    "\077\uffc9\100\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\106" +
    "\uffc9\107\uffc9\001\002\000\144\010\031\020\017\021\016" +
    "\022\054\023\041\024\060\025\052\026\030\027\064\030" +
    "\032\031\015\032\065\033\040\034\073\035\050\036\061" +
    "\037\023\040\014\041\044\042\035\043\074\044\042\045" +
    "\071\046\047\047\075\050\033\051\055\052\020\053\053" +
    "\054\022\055\026\056\021\057\027\060\070\061\045\062" +
    "\036\063\057\064\072\065\025\066\066\067\037\073\024" +
    "\075\046\076\067\105\034\110\051\111\043\112\056\113" +
    "\063\001\002\000\040\010\101\012\105\013\113\014\112" +
    "\015\114\016\110\072\u0106\077\115\100\106\101\107\102" +
    "\102\103\104\104\103\106\100\107\116\001\002\000\144" +
    "\010\031\020\017\021\016\022\054\023\041\024\060\025" +
    "\052\026\030\027\064\030\032\031\015\032\065\033\040" +
    "\034\073\035\050\036\061\037\023\040\014\041\044\042" +
    "\035\043\074\044\042\045\071\046\047\047\075\050\033" +
    "\051\055\052\020\053\053\054\022\055\026\056\021\057" +
    "\027\060\070\061\045\062\036\063\057\064\072\065\025" +
    "\066\066\067\037\073\024\075\046\076\067\105\034\110" +
    "\051\111\043\112\056\113\063\001\002\000\042\010\101" +
    "\012\105\013\113\014\112\015\114\016\110\072\u0108\074" +
    "\u0109\077\115\100\106\101\107\102\102\103\104\104\103" +
    "\106\100\107\116\001\002\000\144\010\031\020\017\021" +
    "\016\022\054\023\041\024\060\025\052\026\030\027\064" +
    "\030\032\031\015\032\065\033\040\034\073\035\050\036" +
    "\061\037\023\040\014\041\044\042\035\043\074\044\042" +
    "\045\071\046\047\047\075\050\033\051\055\052\020\053" +
    "\053\054\022\055\026\056\021\057\027\060\070\061\045" +
    "\062\036\063\057\064\072\065\025\066\066\067\037\073" +
    "\024\075\046\076\067\105\034\110\051\111\043\112\056" +
    "\113\063\001\002\000\046\005\uffdd\010\uffdd\012\uffdd\013" +
    "\uffdd\014\uffdd\015\uffdd\016\uffdd\071\uffdd\072\uffdd\074\uffdd" +
    "\077\uffdd\100\uffdd\101\uffdd\102\uffdd\103\uffdd\104\uffdd\106" +
    "\uffdd\107\uffdd\001\002\000\040\010\101\012\105\013\113" +
    "\014\112\015\114\016\110\074\u010b\077\115\100\106\101" +
    "\107\102\102\103\104\104\103\106\100\107\116\001\002" +
    "\000\046\005\uffdc\010\uffdc\012\uffdc\013\uffdc\014\uffdc\015" +
    "\uffdc\016\uffdc\071\uffdc\072\uffdc\074\uffdc\077\uffdc\100\uffdc" +
    "\101\uffdc\102\uffdc\103\uffdc\104\uffdc\106\uffdc\107\uffdc\001" +
    "\002\000\144\010\031\020\017\021\016\022\054\023\041" +
    "\024\060\025\052\026\030\027\064\030\032\031\015\032" +
    "\065\033\040\034\073\035\050\036\061\037\023\040\014" +
    "\041\044\042\035\043\074\044\042\045\071\046\047\047" +
    "\075\050\033\051\055\052\020\053\053\054\022\055\026" +
    "\056\021\057\027\060\070\061\045\062\036\063\057\064" +
    "\072\065\025\066\066\067\037\073\024\075\046\076\067" +
    "\105\034\110\051\111\043\112\056\113\063\001\002\000" +
    "\040\010\101\012\105\013\113\014\112\015\114\016\110" +
    "\074\u010e\077\115\100\106\101\107\102\102\103\104\104" +
    "\103\106\100\107\116\001\002\000\046\005\uffc7\010\uffc7" +
    "\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7\071\uffc7\072" +
    "\uffc7\074\uffc7\077\uffc7\100\uffc7\101\uffc7\102\uffc7\103\uffc7" +
    "\104\uffc7\106\uffc7\107\uffc7\001\002\000\144\010\031\020" +
    "\017\021\016\022\054\023\041\024\060\025\052\026\030" +
    "\027\064\030\032\031\015\032\065\033\040\034\073\035" +
    "\050\036\061\037\023\040\014\041\044\042\035\043\074" +
    "\044\042\045\071\046\047\047\075\050\033\051\055\052" +
    "\020\053\053\054\022\055\026\056\021\057\027\060\070" +
    "\061\045\062\036\063\057\064\072\065\025\066\066\067" +
    "\037\073\024\075\046\076\067\105\034\110\051\111\043" +
    "\112\056\113\063\001\002\000\040\010\101\012\105\013" +
    "\113\014\112\015\114\016\110\074\u0111\077\115\100\106" +
    "\101\107\102\102\103\104\104\103\106\100\107\116\001" +
    "\002\000\046\005\uffc6\010\uffc6\012\uffc6\013\uffc6\014\uffc6" +
    "\015\uffc6\016\uffc6\071\uffc6\072\uffc6\074\uffc6\077\uffc6\100" +
    "\uffc6\101\uffc6\102\uffc6\103\uffc6\104\uffc6\106\uffc6\107\uffc6" +
    "\001\002\000\144\010\031\020\017\021\016\022\054\023" +
    "\041\024\060\025\052\026\030\027\064\030\032\031\015" +
    "\032\065\033\040\034\073\035\050\036\061\037\023\040" +
    "\014\041\044\042\035\043\074\044\042\045\071\046\047" +
    "\047\075\050\033\051\055\052\020\053\053\054\022\055" +
    "\026\056\021\057\027\060\070\061\045\062\036\063\057" +
    "\064\072\065\025\066\066\067\037\073\024\075\046\076" +
    "\067\105\034\110\051\111\043\112\056\113\063\001\002" +
    "\000\040\010\101\012\105\013\113\014\112\015\114\016" +
    "\110\072\u0114\077\115\100\106\101\107\102\102\103\104" +
    "\104\103\106\100\107\116\001\002\000\144\010\031\020" +
    "\017\021\016\022\054\023\041\024\060\025\052\026\030" +
    "\027\064\030\032\031\015\032\065\033\040\034\073\035" +
    "\050\036\061\037\023\040\014\041\044\042\035\043\074" +
    "\044\042\045\071\046\047\047\075\050\033\051\055\052" +
    "\020\053\053\054\022\055\026\056\021\057\027\060\070" +
    "\061\045\062\036\063\057\064\072\065\025\066\066\067" +
    "\037\073\024\075\046\076\067\105\034\110\051\111\043" +
    "\112\056\113\063\001\002\000\040\010\101\012\105\013" +
    "\113\014\112\015\114\016\110\074\u0116\077\115\100\106" +
    "\101\107\102\102\103\104\104\103\106\100\107\116\001" +
    "\002\000\046\005\uffb5\010\uffb5\012\uffb5\013\uffb5\014\uffb5" +
    "\015\uffb5\016\uffb5\071\uffb5\072\uffb5\074\uffb5\077\uffb5\100" +
    "\uffb5\101\uffb5\102\uffb5\103\uffb5\104\uffb5\106\uffb5\107\uffb5" +
    "\001\002\000\144\010\031\020\017\021\016\022\054\023" +
    "\041\024\060\025\052\026\030\027\064\030\032\031\015" +
    "\032\065\033\040\034\073\035\050\036\061\037\023\040" +
    "\014\041\044\042\035\043\074\044\042\045\071\046\047" +
    "\047\075\050\033\051\055\052\020\053\053\054\022\055" +
    "\026\056\021\057\027\060\070\061\045\062\036\063\057" +
    "\064\072\065\025\066\066\067\037\073\024\075\046\076" +
    "\067\105\034\110\051\111\043\112\056\113\063\001\002" +
    "\000\040\010\101\012\105\013\113\014\112\015\114\016" +
    "\110\074\u0119\077\115\100\106\101\107\102\102\103\104" +
    "\104\103\106\100\107\116\001\002\000\046\005\uffd0\010" +
    "\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\071\uffd0" +
    "\072\uffd0\074\uffd0\077\uffd0\100\uffd0\101\uffd0\102\uffd0\103" +
    "\uffd0\104\uffd0\106\uffd0\107\uffd0\001\002\000\040\005\u011b" +
    "\010\101\012\105\013\113\014\112\015\114\016\110\077" +
    "\115\100\106\101\107\102\102\103\104\104\103\106\100" +
    "\107\116\001\002\000\006\017\u011c\112\u011e\001\002\000" +
    "\004\073\u0135\001\002\000\012\006\u0123\007\u0124\017\u011c" +
    "\112\u011e\001\002\000\004\070\u0120\001\002\000\012\006" +
    "\ufff7\007\ufff7\017\ufff7\112\ufff7\001\002\000\144\010\031" +
    "\020\017\021\016\022\054\023\041\024\060\025\052\026" +
    "\030\027\064\030\032\031\015\032\065\033\040\034\073" +
    "\035\050\036\061\037\023\040\014\041\044\042\035\043" +
    "\074\044\042\045\071\046\047\047\075\050\033\051\055" +
    "\052\020\053\053\054\022\055\026\056\021\057\027\060" +
    "\070\061\045\062\036\063\057\064\072\065\025\066\066" +
    "\067\037\073\024\075\046\076\067\105\034\110\051\111" +
    "\043\112\056\113\063\001\002\000\040\010\101\012\105" +
    "\013\113\014\112\015\114\016\110\071\u0122\077\115\100" +
    "\106\101\107\102\102\103\104\104\103\106\100\107\116" +
    "\001\002\000\012\006\ufff6\007\ufff6\017\ufff6\112\ufff6\001" +
    "\002\000\006\017\u0127\112\u0129\001\002\000\012\002\ufffc" +
    "\004\ufffc\017\ufffc\112\ufffc\001\002\000\012\006\ufff8\007" +
    "\ufff8\017\ufff8\112\ufff8\001\002\000\010\007\ufff3\017\ufff3" +
    "\112\ufff3\001\002\000\004\073\u012f\001\002\000\010\007" +
    "\u012e\017\u0127\112\u0129\001\002\000\004\070\u012a\001\002" +
    "\000\144\010\031\020\017\021\016\022\054\023\041\024" +
    "\060\025\052\026\030\027\064\030\032\031\015\032\065" +
    "\033\040\034\073\035\050\036\061\037\023\040\014\041" +
    "\044\042\035\043\074\044\042\045\071\046\047\047\075" +
    "\050\033\051\055\052\020\053\053\054\022\055\026\056" +
    "\021\057\027\060\070\061\045\062\036\063\057\064\072" +
    "\065\025\066\066\067\037\073\024\075\046\076\067\105" +
    "\034\110\051\111\043\112\056\113\063\001\002\000\040" +
    "\010\101\012\105\013\113\014\112\015\114\016\110\071" +
    "\u012c\077\115\100\106\101\107\102\102\103\104\104\103" +
    "\106\100\107\116\001\002\000\010\007\ufff2\017\ufff2\112" +
    "\ufff2\001\002\000\010\007\ufff4\017\ufff4\112\ufff4\001\002" +
    "\000\012\002\ufffb\004\ufffb\017\ufffb\112\ufffb\001\002\000" +
    "\004\113\u0130\001\002\000\004\074\u0131\001\002\000\004" +
    "\070\u0132\001\002\000\144\010\031\020\017\021\016\022" +
    "\054\023\041\024\060\025\052\026\030\027\064\030\032" +
    "\031\015\032\065\033\040\034\073\035\050\036\061\037" +
    "\023\040\014\041\044\042\035\043\074\044\042\045\071" +
    "\046\047\047\075\050\033\051\055\052\020\053\053\054" +
    "\022\055\026\056\021\057\027\060\070\061\045\062\036" +
    "\063\057\064\072\065\025\066\066\067\037\073\024\075" +
    "\046\076\067\105\034\110\051\111\043\112\056\113\063" +
    "\001\002\000\040\010\101\012\105\013\113\014\112\015" +
    "\114\016\110\071\u0134\077\115\100\106\101\107\102\102" +
    "\103\104\104\103\106\100\107\116\001\002\000\010\007" +
    "\ufff1\017\ufff1\112\ufff1\001\002\000\004\113\u0136\001\002" +
    "\000\004\074\u0137\001\002\000\004\070\u0138\001\002\000" +
    "\144\010\031\020\017\021\016\022\054\023\041\024\060" +
    "\025\052\026\030\027\064\030\032\031\015\032\065\033" +
    "\040\034\073\035\050\036\061\037\023\040\014\041\044" +
    "\042\035\043\074\044\042\045\071\046\047\047\075\050" +
    "\033\051\055\052\020\053\053\054\022\055\026\056\021" +
    "\057\027\060\070\061\045\062\036\063\057\064\072\065" +
    "\025\066\066\067\037\073\024\075\046\076\067\105\034" +
    "\110\051\111\043\112\056\113\063\001\002\000\040\010" +
    "\101\012\105\013\113\014\112\015\114\016\110\071\u013a" +
    "\077\115\100\106\101\107\102\102\103\104\104\103\106" +
    "\100\107\116\001\002\000\012\006\ufff5\007\ufff5\017\ufff5" +
    "\112\ufff5\001\002\000\012\002\001\004\001\017\001\112" +
    "\001\001\002\000\004\002\000\001\002\000\004\113\u013e" +
    "\001\002\000\004\074\u013f\001\002\000\004\070\u0140\001" +
    "\002\000\144\010\031\020\017\021\016\022\054\023\041" +
    "\024\060\025\052\026\030\027\064\030\032\031\015\032" +
    "\065\033\040\034\073\035\050\036\061\037\023\040\014" +
    "\041\044\042\035\043\074\044\042\045\071\046\047\047" +
    "\075\050\033\051\055\052\020\053\053\054\022\055\026" +
    "\056\021\057\027\060\070\061\045\062\036\063\057\064" +
    "\072\065\025\066\066\067\037\073\024\075\046\076\067" +
    "\105\034\110\051\111\043\112\056\113\063\001\002\000" +
    "\040\010\101\012\105\013\113\014\112\015\114\016\110" +
    "\071\u0142\077\115\100\106\101\107\102\102\103\104\104" +
    "\103\106\100\107\116\001\002\000\012\002\ufff9\004\ufff9" +
    "\017\ufff9\112\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0140\000\012\002\006\003\005\004\004\005\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\u013a\004\004\005\007\001\001\000\002\001" +
    "\001\000\004\012\u0119\001\001\000\002\001\001\000\004" +
    "\012\061\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\327\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\314\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\076\001\001\000\002\001\001\000" +
    "\004\012\141\001\001\000\004\012\140\001\001\000\004" +
    "\012\137\001\001\000\004\012\136\001\001\000\004\012" +
    "\135\001\001\000\004\012\134\001\001\000\004\012\133" +
    "\001\001\000\004\012\132\001\001\000\004\012\131\001" +
    "\001\000\004\012\123\001\001\000\004\012\122\001\001" +
    "\000\004\012\121\001\001\000\004\012\120\001\001\000" +
    "\004\012\117\001\001\000\004\012\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\125" +
    "\001\001\000\002\001\001\000\004\012\127\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\146\001\001\000\002" +
    "\001\001\000\004\012\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\153\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\156\001\001\000\002\001" +
    "\001\000\004\012\160\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\163\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\166\001\001\000\002\001\001" +
    "\000\004\012\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\202\001\001" +
    "\000\002\001\001\000\004\012\204\001\001\000\002\001" +
    "\001\000\004\012\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\212\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\220\001" +
    "\001\000\002\001\001\000\004\012\222\001\001\000\002" +
    "\001\001\000\004\012\224\001\001\000\002\001\001\000" +
    "\004\012\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\235\001\001\000\002" +
    "\001\001\000\004\012\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\242\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\250\001\001\000\002\001\001" +
    "\000\004\012\252\001\001\000\002\001\001\000\004\012" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\257\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\262\001\001\000\002\001\001\000\004\012\264" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\267\001\001\000\002\001\001\000\004\012\271\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\274\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\277" +
    "\001\001\000\002\001\001\000\004\012\301\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\307\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\312" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\316\001\001\000\002\001\001\000\004" +
    "\012\320\001\001\000\002\001\001\000\004\012\322\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\325" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\331\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\337\001\001\000\002\001\001" +
    "\000\004\012\341\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\344\001\001\000\002\001\001\000\004" +
    "\012\346\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\353\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\356\001" +
    "\001\000\002\001\001\000\004\012\360\001\001\000\002" +
    "\001\001\000\004\012\363\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\366\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\371\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\374" +
    "\001\001\000\002\001\001\000\004\012\377\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0104\001\001\000" +
    "\002\001\001\000\004\012\u0106\001\001\000\002\001\001" +
    "\000\004\012\u0109\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u010c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0112\001\001" +
    "\000\002\001\001\000\004\012\u0114\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\u011c\007\u011e\001\001\000\002\001\001\000\004\007\u0124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u0120\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\u0127\011\u0125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\u012c" +
    "\001\001\000\002\001\001\000\004\012\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0132\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0138\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u0140" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  /** the logger. */
  private final static Logger LOGGER = LoggingHelper.getConsoleLogger(Parser.class);
  
  /** key - value relation. */
  protected HashMap m_Symbols = new HashMap();

  /** the if key - value relation. */
  protected HashMap m_If = new HashMap();

  /** the else key - value relation. */
  protected HashMap m_Else = new HashMap();

  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /**
   * Returns the logger.
   *
   * @return the variable-value relation
   */
  public Logger getLogger() {
    return LOGGER;
  }

  /**
   * Sets the variable - value relation to use.
   *
   * @param value the variable-value relation
   */
  public void setSymbols(HashMap value) {
    m_Symbols = value;
    m_Helper.setSymbols(value);
  }

  /**
   * Returns the current variable - value relation in use.
   *
   * @return the variable-value relation
   */
  public HashMap getSymbols() {
    return m_Symbols;
  }

  /**
   * Returns the if lookup items.
   *
   * @return the if lookup items
   */
  public HashMap getIf() {
    return m_If;
  }

  /**
   * Returns the else lookup items.
   *
   * @return the else lookup items
   */
  public HashMap getElse() {
    return m_Else;
  }

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_part ::= conditional 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // conditional ::= IF expr THEN if_assignments END 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		
                    if (parser.getHelper().toBoolean(c))
                      parser.getSymbols().putAll(parser.getIf());
                    parser.getIf().clear();
                    parser.getElse().clear();
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // conditional ::= IF expr THEN if_assignments ELSE else_assignments END 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
                    if (parser.getHelper().toBoolean(c))
                      parser.getSymbols().putAll(parser.getIf());
                    else
                      parser.getSymbols().putAll(parser.getElse());
                    parser.getIf().clear();
                    parser.getElse().clear();
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // assignment ::= VARIABLE ASSIGNMENT expr SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   parser.getSymbols().put(v.toString(), e);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // assignment ::= ALL LPAREN STRING RPAREN ASSIGNMENT expr SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    BaseRegExp regex = new BaseRegExp(s);
                    for (Object key: parser.getSymbols().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getSymbols().put(key.toString(), e);
                    }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assignment",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // if_assignments ::= if_assignments if_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_assignments",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // if_assignments ::= if_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_assignments",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // if_assignment ::= VARIABLE ASSIGNMENT expr SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   parser.getIf().put(v.toString(), e);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_assignment",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // if_assignment ::= ALL LPAREN STRING RPAREN ASSIGNMENT expr SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    BaseRegExp regex = new BaseRegExp(s);
                    for (Object key: parser.getSymbols().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getIf().put(key.toString(), e);
                    }
                    for (Object key: parser.getIf().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getIf().put(key.toString(), e);
                    }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_assignment",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // else_assignments ::= else_assignments else_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_assignments",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // else_assignments ::= else_assignment 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_assignments",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // else_assignment ::= VARIABLE ASSIGNMENT expr SEMI 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   parser.getElse().put(v.toString(), e);
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_assignment",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // else_assignment ::= ALL LPAREN STRING RPAREN ASSIGNMENT expr SEMI 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    BaseRegExp regex = new BaseRegExp(s);
                    for (Object key: parser.getSymbols().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getElse().put(key.toString(), e);
                    }
                    for (Object key: parser.getElse().keySet()) {
                      if (regex.isMatch(key.toString()))
                        parser.getElse().put(key.toString(), e);
                    }
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("else_assignment",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expr ::= LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= NUMBER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= STRING 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= BOOLEAN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= VARIABLE 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 if (parser.getSymbols().containsKey(v.toString()))
                     RESULT = parser.getSymbols().get(v.toString());
                   else
                     throw new IllegalStateException("Unknown symbol '" + v + "'!");
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= TRUE 
            {
              Object RESULT =null;
		 RESULT = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= FALSE 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= MINUS expr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = -parser.getHelper().toNumber(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr LT expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (boolean) (parser.getHelper().compare(l, r) < 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr LE expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (boolean) (parser.getHelper().compare(l, r) <= 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr GT expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (boolean) (parser.getHelper().compare(l, r) > 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr GE expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (boolean) (parser.getHelper().compare(l, r) >= 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr EQ expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (boolean) (parser.getHelper().compare(l, r) == 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr NOT_EQ expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (boolean) (parser.getHelper().compare(l, r) != 0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= NOT expr 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = !parser.getHelper().toBoolean(c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr AND expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.getHelper().toBoolean(l) && parser.getHelper().toBoolean(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr OR expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = parser.getHelper().toBoolean(l) || parser.getHelper().toBoolean(r); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= MATCHES LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int patternleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int patternright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object pattern = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (boolean) (parser.getHelper().toString(s).matches(parser.getHelper().toString(pattern))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= CONTAINS LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (boolean) (parser.getHelper().toString(s).contains(parser.getHelper().toString(f))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= FIND LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (parser.getHelper().toString(s).toLowerCase().indexOf(parser.getHelper().toString(f).toLowerCase()) + 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= FIND LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (parser.getHelper().toString(s).toLowerCase().indexOf(parser.getHelper().toString(f).toLowerCase(), parser.getHelper().toInteger(p) - 1) + 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= SUBSTR LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).substring(parser.getHelper().toDouble(start).intValue() - 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= SUBSTR LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object start = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int endright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).substring(parser.getHelper().toDouble(start).intValue() - 1, parser.getHelper().toDouble(end).intValue() - 1); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= LEFT LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().left(parser.getHelper().toString(s), parser.getHelper().toInteger(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expr ::= MID LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().mid(parser.getHelper().toString(s), parser.getHelper().toInteger(f) - 1, parser.getHelper().toInteger(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expr ::= RIGHT LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().right(parser.getHelper().toString(s), parser.getHelper().toInteger(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr ::= REPEAT LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().repeat(parser.getHelper().toString(s), parser.getHelper().toInteger(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr ::= CONCATENATE LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String(parser.getHelper().toString(s1) + parser.getHelper().toString(s2)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= CONCATENATE LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String(parser.getHelper().toString(s1) + parser.getHelper().toString(s2) + parser.getHelper().toString(s3)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= CONCATENATE LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String(parser.getHelper().toString(s1) + parser.getHelper().toString(s2) + parser.getHelper().toString(s3) + parser.getHelper().toString(s4)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= CONCATENATE LPAREN expr COMMA expr COMMA expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object s1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object s2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int s3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int s3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int s4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int s4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object s4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new String(parser.getHelper().toString(s1) + parser.getHelper().toString(s2) + parser.getHelper().toString(s3) + parser.getHelper().toString(s4) + parser.getHelper().toString(s5)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= LOWERCASE LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).toLowerCase(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= UPPERCASE LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).toUpperCase(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= TRIM LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).trim(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= REPLACE LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().replace(parser.getHelper().toString(s), parser.getHelper().toInteger(p) - 1, parser.getHelper().toInteger(l), parser.getHelper().toString(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= REPLACEALL LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s).replaceAll(parser.getHelper().toString(f), parser.getHelper().toString(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= SUBSTITUTE LPAREN expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().substitute(parser.getHelper().toString(s), parser.getHelper().toString(f), parser.getHelper().toString(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= SUBSTITUTE LPAREN expr COMMA expr COMMA expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().substitute(parser.getHelper().toString(s), parser.getHelper().toString(f), parser.getHelper().toString(r), parser.getHelper().toInteger(o)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= STR LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = parser.getHelper().toString(s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= STR LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = adams.core.Utils.doubleToString(parser.getHelper().toDouble(d), parser.getHelper().toInteger(n)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= STR LPAREN expr COMMA STRING RPAREN 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new java.text.DecimalFormat(f).format(parser.getHelper().toDouble(d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= ABS LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.abs(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= SQRT LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.sqrt(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= CBRT LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.cbrt(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr ::= LOG LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.log(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr ::= LOG10 LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.log10(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr ::= EXP LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.exp(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr ::= SIN LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.sin(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr ::= SINH LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.sinh(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr ::= COS LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.cos(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr ::= COSH LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.cosh(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr ::= TAN LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.tan(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr ::= TANH LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.tanh(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr ::= ATAN LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.atan(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr ::= ATAN2 LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.atan2(parser.getHelper().toDouble(y), parser.getHelper().toDouble(x))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr ::= HYPOT LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object x = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int yleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int yright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object y = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.hypot(parser.getHelper().toDouble(x), parser.getHelper().toDouble(y))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr ::= SIGNUM LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.signum(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr ::= RINT LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.rint(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr ::= FLOOR LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.floor(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr ::= POW LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.pow(parser.getHelper().toDouble(b), parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr ::= CEIL LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.ceil(parser.getHelper().toDouble(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr ::= MIN LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.min(parser.getHelper().toDouble(e1), parser.getHelper().toDouble(e2))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr ::= MAX LPAREN expr COMMA expr RPAREN 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (double) (Math.max(parser.getHelper().toDouble(e1), parser.getHelper().toDouble(e2))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // expr ::= HAS LPAREN VARIABLE RPAREN 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (boolean) (parser.getSymbols().containsKey(v.toString())); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // expr ::= LENGTH LPAREN expr RPAREN 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                   if (s.getClass().isArray())
                     RESULT = (double) (Array.getLength(s));
                   else
                     RESULT = (double) (parser.getHelper().toString(s).length());
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expr ::= expr PLUS expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double) (parser.getHelper().toNumber(l) + parser.getHelper().toNumber(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expr ::= expr MINUS expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double) (parser.getHelper().toNumber(l) - parser.getHelper().toNumber(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expr ::= expr TIMES expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double) (parser.getHelper().toNumber(l) * parser.getHelper().toNumber(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // expr ::= expr DIVISION expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double) (parser.getHelper().toNumber(l) / parser.getHelper().toNumber(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= expr MODULO expr 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double) (parser.getHelper().toNumber(l) % parser.getHelper().toNumber(r)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= expr EXPONENT expr 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (double) (Math.pow(parser.getHelper().toNumber(b), parser.getHelper().toNumber(e))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
