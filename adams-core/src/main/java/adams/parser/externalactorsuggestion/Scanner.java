/* The following code was generated by JFlex 1.4.3 on 25/09/24, 1:27 PM */

/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */


/*
 * Scanner.java
 * Copyright (C) 2018-2024 University of Waikato, Hamilton, New Zealand
 */

package adams.parser.externalactorsuggestion;

import java_cup.runtime.SymbolFactory;

import java.io.InputStream;

/**
 * A scanner for parsing actor suggestion rules.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 */

public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\33\1\42\1\0\1\33\1\36\22\0\1\33\1\0\1\34"+
    "\1\0\1\26\3\0\1\31\1\32\4\0\1\30\1\0\12\27\7\0"+
    "\1\1\1\12\1\17\1\3\1\13\1\14\1\20\1\7\1\10\1\26"+
    "\1\25\1\21\1\24\1\2\1\4\1\15\1\26\1\5\1\11\1\6"+
    "\1\23\1\26\1\22\1\26\1\16\1\26\1\0\1\35\2\0\1\26"+
    "\1\0\15\26\1\40\3\26\1\41\1\26\1\37\6\26\uff85\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\14\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\4\2\1\0\1\2\1\12\2\2\1\13"+
    "\1\14\14\2\1\15\1\16\1\17\1\20\1\21\4\2"+
    "\1\22\27\2\1\23\1\24\1\25\4\2\1\26\7\2"+
    "\1\27\1\30\1\2\1\31\10\2\1\32\1\2\1\33"+
    "\5\2\1\34\2\2\1\35\1\36\1\2\1\37\1\2"+
    "\1\40\3\2\1\41\1\2\1\42\12\2\1\43\2\2"+
    "\1\44\1\45\1\46\1\2\1\47\1\50";

  private static int [] zzUnpackAction() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\106\0\151\0\214\0\257\0\322\0\365"+
    "\0\u0118\0\u013b\0\u015e\0\u0181\0\u01a4\0\u01c7\0\u01ea\0\106"+
    "\0\106\0\106\0\106\0\u020d\0\106\0\u0230\0\u0253\0\u0276"+
    "\0\u0299\0\u02bc\0\u02df\0\u0302\0\257\0\u0325\0\u0348\0\u036b"+
    "\0\257\0\u038e\0\u03b1\0\u03d4\0\u03f7\0\u041a\0\u043d\0\u0460"+
    "\0\u0483\0\u04a6\0\u04c9\0\u04ec\0\u050f\0\106\0\106\0\106"+
    "\0\106\0\257\0\u0532\0\u0555\0\u0578\0\u059b\0\257\0\u05be"+
    "\0\u05e1\0\u0604\0\u0627\0\u064a\0\u066d\0\u0690\0\u06b3\0\u06d6"+
    "\0\u06f9\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee"+
    "\0\u0811\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\257\0\257"+
    "\0\257\0\u08e3\0\u0906\0\u0929\0\u094c\0\257\0\u096f\0\u0992"+
    "\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41\0\257\0\257\0\u0a64"+
    "\0\257\0\u0a87\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59"+
    "\0\u0b7c\0\257\0\u0b9f\0\257\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b"+
    "\0\u0c4e\0\257\0\u0c71\0\u0c94\0\257\0\257\0\u0cb7\0\257"+
    "\0\u0cda\0\257\0\u0cfd\0\u0d20\0\u0d43\0\257\0\u0d66\0\257"+
    "\0\u0d89\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e"+
    "\0\u0ea1\0\u0ec4\0\257\0\u0ee7\0\u0f0a\0\257\0\257\0\257"+
    "\0\u0f2d\0\257\0\257";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\6\1\10\1\6"+
    "\1\11\1\12\1\13\1\6\1\14\1\15\2\6\1\16"+
    "\1\17\5\6\2\3\1\20\1\21\1\22\1\23\1\3"+
    "\1\22\3\6\1\22\34\24\1\25\1\26\1\3\3\24"+
    "\45\0\1\6\1\27\11\6\1\30\2\6\1\31\1\6"+
    "\1\32\6\6\1\33\6\0\3\6\2\0\3\6\1\34"+
    "\23\6\1\33\6\0\3\6\2\0\27\6\1\33\6\0"+
    "\3\6\2\0\4\6\1\35\22\6\1\33\6\0\3\6"+
    "\2\0\4\6\1\36\1\6\1\37\20\6\1\33\6\0"+
    "\3\6\2\0\10\6\1\40\2\6\1\41\13\6\1\33"+
    "\6\0\3\6\2\0\3\6\1\42\1\6\1\43\1\6"+
    "\1\44\17\6\1\33\6\0\3\6\2\0\12\6\1\45"+
    "\14\6\1\33\6\0\3\6\2\0\1\46\2\6\1\47"+
    "\3\6\1\50\17\6\1\33\6\0\3\6\2\0\1\51"+
    "\3\6\1\52\22\6\1\33\6\0\3\6\2\0\12\6"+
    "\1\53\14\6\1\33\6\0\3\6\2\0\1\54\6\6"+
    "\1\55\17\6\1\33\6\0\3\6\1\0\34\24\3\0"+
    "\3\24\35\0\1\56\2\0\1\57\1\60\1\61\2\0"+
    "\2\6\1\62\12\6\1\63\11\6\1\33\6\0\3\6"+
    "\2\0\5\6\1\64\21\6\1\33\6\0\3\6\2\0"+
    "\16\6\1\65\10\6\1\33\6\0\3\6\2\0\20\6"+
    "\1\66\6\6\1\33\6\0\3\6\2\0\26\6\10\0"+
    "\3\6\2\0\5\6\1\67\21\6\1\33\6\0\3\6"+
    "\2\0\1\70\21\6\1\71\4\6\1\33\6\0\3\6"+
    "\2\0\7\6\1\72\2\6\1\73\14\6\1\33\6\0"+
    "\3\6\2\0\13\6\1\74\4\6\1\75\6\6\1\33"+
    "\6\0\3\6\2\0\22\6\1\76\4\6\1\33\6\0"+
    "\3\6\2\0\1\77\26\6\1\33\6\0\3\6\2\0"+
    "\1\6\1\100\25\6\1\33\6\0\3\6\2\0\13\6"+
    "\1\101\13\6\1\33\6\0\3\6\2\0\20\6\1\102"+
    "\6\6\1\33\6\0\3\6\2\0\20\6\1\103\6\6"+
    "\1\33\6\0\3\6\2\0\4\6\1\104\22\6\1\33"+
    "\6\0\3\6\2\0\4\6\1\105\22\6\1\33\6\0"+
    "\3\6\2\0\12\6\1\106\14\6\1\33\6\0\3\6"+
    "\2\0\1\6\1\107\25\6\1\33\6\0\3\6\2\0"+
    "\10\6\1\110\16\6\1\33\6\0\3\6\2\0\24\6"+
    "\1\111\2\6\1\33\6\0\3\6\2\0\14\6\1\112"+
    "\12\6\1\33\6\0\3\6\2\0\12\6\1\113\14\6"+
    "\1\33\6\0\3\6\2\0\12\6\1\114\14\6\1\33"+
    "\6\0\3\6\2\0\3\6\1\115\23\6\1\33\6\0"+
    "\3\6\2\0\1\6\1\116\25\6\1\33\6\0\3\6"+
    "\2\0\12\6\1\117\14\6\1\33\6\0\3\6\2\0"+
    "\10\6\1\120\16\6\1\33\6\0\3\6\2\0\1\6"+
    "\1\121\25\6\1\33\6\0\3\6\2\0\7\6\1\122"+
    "\17\6\1\33\6\0\3\6\2\0\1\123\26\6\1\33"+
    "\6\0\3\6\2\0\4\6\1\124\22\6\1\33\6\0"+
    "\3\6\2\0\1\6\1\125\25\6\1\33\6\0\3\6"+
    "\2\0\24\6\1\126\2\6\1\33\6\0\3\6\2\0"+
    "\3\6\1\127\23\6\1\33\6\0\3\6\2\0\10\6"+
    "\1\130\16\6\1\33\6\0\3\6\2\0\20\6\1\131"+
    "\6\6\1\33\6\0\3\6\2\0\10\6\1\132\16\6"+
    "\1\33\6\0\3\6\2\0\12\6\1\133\14\6\1\33"+
    "\6\0\3\6\2\0\16\6\1\134\10\6\1\33\6\0"+
    "\3\6\2\0\12\6\1\135\14\6\1\33\6\0\3\6"+
    "\2\0\5\6\1\136\21\6\1\33\6\0\3\6\2\0"+
    "\12\6\1\137\14\6\1\33\6\0\3\6\2\0\1\140"+
    "\26\6\1\33\6\0\3\6\2\0\4\6\1\141\22\6"+
    "\1\33\6\0\3\6\2\0\14\6\1\142\12\6\1\33"+
    "\6\0\3\6\2\0\21\6\1\143\5\6\1\33\6\0"+
    "\3\6\2\0\10\6\1\144\16\6\1\33\6\0\3\6"+
    "\2\0\4\6\1\145\22\6\1\33\6\0\3\6\2\0"+
    "\10\6\1\146\16\6\1\33\6\0\3\6\2\0\16\6"+
    "\1\147\10\6\1\33\6\0\3\6\2\0\2\6\1\150"+
    "\24\6\1\33\6\0\3\6\2\0\4\6\1\151\22\6"+
    "\1\33\6\0\3\6\2\0\12\6\1\152\14\6\1\33"+
    "\6\0\3\6\2\0\3\6\1\153\23\6\1\33\6\0"+
    "\3\6\2\0\5\6\1\154\21\6\1\33\6\0\3\6"+
    "\2\0\1\6\1\155\25\6\1\33\6\0\3\6\2\0"+
    "\12\6\1\156\14\6\1\33\6\0\3\6\2\0\4\6"+
    "\1\157\22\6\1\33\6\0\3\6\2\0\4\6\1\160"+
    "\22\6\1\33\6\0\3\6\2\0\5\6\1\161\21\6"+
    "\1\33\6\0\3\6\2\0\10\6\1\162\16\6\1\33"+
    "\6\0\3\6\2\0\13\6\1\163\13\6\1\33\6\0"+
    "\3\6\2\0\10\6\1\164\16\6\1\33\6\0\3\6"+
    "\2\0\5\6\1\165\21\6\1\33\6\0\3\6\2\0"+
    "\12\6\1\166\14\6\1\33\6\0\3\6\2\0\1\167"+
    "\26\6\1\33\6\0\3\6\2\0\12\6\1\170\14\6"+
    "\1\33\6\0\3\6\2\0\21\6\1\171\5\6\1\33"+
    "\6\0\3\6\2\0\5\6\1\172\21\6\1\33\6\0"+
    "\3\6\2\0\2\6\1\173\24\6\1\33\6\0\3\6"+
    "\2\0\1\174\26\6\1\33\6\0\3\6\2\0\12\6"+
    "\1\175\14\6\1\33\6\0\3\6\2\0\10\6\1\176"+
    "\16\6\1\33\6\0\3\6\2\0\3\6\1\177\23\6"+
    "\1\33\6\0\3\6\2\0\5\6\1\200\21\6\1\33"+
    "\6\0\3\6\2\0\20\6\1\201\6\6\1\33\6\0"+
    "\3\6\2\0\7\6\1\202\17\6\1\33\6\0\3\6"+
    "\2\0\7\6\1\203\17\6\1\33\6\0\3\6\2\0"+
    "\5\6\1\204\21\6\1\33\6\0\3\6\2\0\1\6"+
    "\1\205\25\6\1\33\6\0\3\6\2\0\4\6\1\206"+
    "\22\6\1\33\6\0\3\6\2\0\3\6\1\207\23\6"+
    "\1\33\6\0\3\6\2\0\1\6\1\210\25\6\1\33"+
    "\6\0\3\6\2\0\1\6\1\211\25\6\1\33\6\0"+
    "\3\6\2\0\12\6\1\212\14\6\1\33\6\0\3\6"+
    "\2\0\5\6\1\213\21\6\1\33\6\0\3\6\2\0"+
    "\23\6\1\214\3\6\1\33\6\0\3\6\2\0\1\6"+
    "\1\215\25\6\1\33\6\0\3\6\2\0\17\6\1\216"+
    "\7\6\1\33\6\0\3\6\2\0\17\6\1\217\7\6"+
    "\1\33\6\0\3\6\2\0\10\6\1\220\16\6\1\33"+
    "\6\0\3\6\2\0\12\6\1\221\14\6\1\33\6\0"+
    "\3\6\2\0\12\6\1\222\14\6\1\33\6\0\3\6"+
    "\2\0\4\6\1\223\22\6\1\33\6\0\3\6\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\14\1\4\11\1\1\1\11\5\1\1\0"+
    "\22\1\4\11\142\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[147];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  // Author: FracPete (fracpete at waikato dot ac dot nz)
  // Version: $Revision$
  protected SymbolFactory sf;

  public Scanner(InputStream r, SymbolFactory sf){
    this(r);
    this.sf = sf;
  }
  StringBuilder string = new StringBuilder();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 118) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { return sf.newSymbol("IsLast",      sym.ISLAST);
          }
        case 41: break;
        case 32: 
          { return sf.newSymbol("Parent" ,     sym.PARENT);
          }
        case 42: break;
        case 39: 
          { return sf.newSymbol("Standalone",  sym.STANDALONE);
          }
        case 43: break;
        case 27: 
          { return sf.newSymbol("First",       sym.FIRST);
          }
        case 44: break;
        case 3: 
          { return sf.newSymbol("Left Bracket",  sym.LPAREN);
          }
        case 45: break;
        case 26: 
          { return sf.newSymbol("False",       sym.FALSE);
          }
        case 46: break;
        case 14: 
          { string.append('\t');
          }
        case 47: break;
        case 2: 
          { return sf.newSymbol("Classname", sym.CLASSNAME, yytext());
          }
        case 48: break;
        case 6: 
          { string.setLength(0); yybegin(STRING);
          }
        case 49: break;
        case 31: 
          { return sf.newSymbol("Before",      sym.BEFORE);
          }
        case 50: break;
        case 40: 
          { return sf.newSymbol("Transformer", sym.TRANSFORMER);
          }
        case 51: break;
        case 5: 
          { /* ignore white space. */
          }
        case 52: break;
        case 35: 
          { return sf.newSymbol("AnyParent" ,  sym.ANYPARENT);
          }
        case 53: break;
        case 9: 
          { string.append('\\');
          }
        case 54: break;
        case 16: 
          { string.append('\r');
          }
        case 55: break;
        case 12: 
          { return sf.newSymbol("If",          sym.IF);
          }
        case 56: break;
        case 4: 
          { return sf.newSymbol("Right Bracket", sym.RPAREN);
          }
        case 57: break;
        case 25: 
          { return sf.newSymbol("After",       sym.AFTER);
          }
        case 58: break;
        case 33: 
          { return sf.newSymbol("Accepts",     sym.ACCEPTS);
          }
        case 59: break;
        case 10: 
          { return sf.newSymbol("Or",          sym.OR);
          }
        case 60: break;
        case 24: 
          { return sf.newSymbol("Like",        sym.LIKE);
          }
        case 61: break;
        case 13: 
          { string.append('\"');
          }
        case 62: break;
        case 8: 
          { yybegin(YYINITIAL);
                  return sf.newSymbol("Classname", sym.CMDLINE, string.toString());
          }
        case 63: break;
        case 37: 
          { return sf.newSymbol("Preceding" ,  sym.PRECEDING);
          }
        case 64: break;
        case 18: 
          { return sf.newSymbol("Not",         sym.NOT);
          }
        case 65: break;
        case 17: 
          { return sf.newSymbol("And",         sym.AND);
          }
        case 66: break;
        case 36: 
          { return sf.newSymbol("Following" ,  sym.FOLLOWING);
          }
        case 67: break;
        case 15: 
          { string.append('\n');
          }
        case 68: break;
        case 38: 
          { return sf.newSymbol("Generates",   sym.GENERATES);
          }
        case 69: break;
        case 7: 
          { string.append(yytext());
          }
        case 70: break;
        case 28: 
          { return sf.newSymbol("Allows",      sym.ALLOWS);
          }
        case 71: break;
        case 22: 
          { return sf.newSymbol("Sink",        sym.SINK);
          }
        case 72: break;
        case 21: 
          { return sf.newSymbol("Then",        sym.THEN);
          }
        case 73: break;
        case 1: 
          { System.err.println("Illegal character: "+yytext());
          }
        case 74: break;
        case 19: 
          { return sf.newSymbol("True",        sym.TRUE);
          }
        case 75: break;
        case 23: 
          { return sf.newSymbol("Last",        sym.LAST);
          }
        case 76: break;
        case 34: 
          { return sf.newSymbol("IsFirst",     sym.ISFIRST);
          }
        case 77: break;
        case 20: 
          { return sf.newSymbol("This",        sym.THIS);
          }
        case 78: break;
        case 30: 
          { return sf.newSymbol("Source",      sym.SOURCE);
          }
        case 79: break;
        case 11: 
          { return sf.newSymbol("Is",          sym.IS);
          }
        case 80: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {     return sf.newSymbol("EOF",sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
