/*
 * STANDARD ML OF NEW JERSEY COPYRIGHT NOTICE, LICENSE AND DISCLAIMER.
 *
 * Copyright (c) 1989-1998 by Lucent Technologies
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose and without fee is hereby granted, provided
 * that the above copyright notice appear in all copies and that both the
 * copyright notice and this permission notice and warranty disclaimer appear
 * in supporting documentation, and that the name of Lucent Technologies, Bell
 * Labs or any Lucent entity not be used in advertising or publicity pertaining
 * to distribution of the software without specific, written prior permission.
 *
 * Lucent disclaims all warranties with regard to this software, including all
 * implied warranties of merchantability and fitness. In no event shall Lucent
 * be liable for any special, indirect or consequential damages or any damages
 * whatsoever resulting from loss of use, data or profits, whether in an action
 * of contract, negligence or other tortious action, arising out of or in
 * connection with the use or performance of this software.
 *
 * Taken from this URL:
 * http://www.smlnj.org/license.html
 *
 * This license is compatible with the GNU GPL (see section "Standard ML of New
 * Jersey Copyright License"):
 * http://www.gnu.org/licenses/license-list.html#StandardMLofNJ
 */

/*
 * Copyright 1996-1999 by Scott Hudson, Frank Flannery, C. Scott Ananian
 */

package adams.parser.actorsuggestion;

import nz.ac.waikato.cms.locator.ClassLocator;
import adams.core.classmanager.ClassManager;
import adams.flow.core.AbstractActor;
import adams.flow.core.Actor;
import adams.flow.core.ActorUtils;
import adams.flow.core.ActorHandler;
import adams.flow.core.Compatibility;
import adams.flow.core.InputConsumer;
import adams.flow.core.OutputProducer;
import adams.gui.flow.tree.Node;
import adams.parser.ParserHelper;

import java_cup.runtime.*;

import java.io.*;
import java.util.*;
import java.util.logging.Level;

/**
 * A parser for parsing a rule file for suggesting an actor.
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 */

parser code {:
  /** the helper. */
  protected ParserHelper m_Helper = new ParserHelper();

  /** for storing the result of the expression. */
  protected Actor m_Result = null;

  /** the parent of the proposed actor. */
  protected Actor m_Parent = null;

  /** the parent node of the proposed actor. */
  protected Node m_ParentNode = null;

  /** the last parent used. */
  protected Actor m_LastParent = null;

  /** the last parent node used. */
  protected Node m_LastParentNode = null;

  /** the position to add the proposed actor at. */
  protected Integer m_Position = null;

  /** all the current actors in which to insert/add to the proposed actor. */
  protected Actor[] m_Actors = null;

  /** all the current nodes in which to insert/add to the proposed actor. */
  protected Node[] m_ActorNodes = null;

  /** for checking compatibility. */
  protected Compatibility m_Compatibility = new Compatibility(true);

  /**
   * Returns the parser helper.
   *
   * @return the helper
   */
  public ParserHelper getHelper() {
    return m_Helper;
  }

  /**
   * Sets the result of the evaluation.
   *
   * @param value the result
   */
  public void setResult(Actor value) {
    m_Result = value;
  }

  /**
   * Returns the result of the evaluation.
   *
   * @return the result
   */
  public Actor getResult() {
    return m_Result;
  }

  /**
   * Sets the parent of the proposed actor.
   *
   * @param value the actor
   */
  public void setParent(Actor value) {
    m_Parent     = value;
    m_LastParent = value;
  }

  /**
   * Returns the parent of the proposed actor.
   *
   * @return the parent
   */
  public Actor getParent() {
    return m_Parent;
  }

  /**
   * Sets the parent node of the proposed actor.
   *
   * @param value the actor
   */
  public void setParentNode(Node value) {
    m_ParentNode     = value;
    m_LastParentNode = value;
  }

  /**
   * Returns the parent node of the proposed actor.
   *
   * @return the parent
   */
  public Node getParentNode() {
    return m_ParentNode;
  }

  /**
   * Sets the position of the proposed actor.
   *
   * @param value the position
   */
  public void setPosition(Integer value) {
    m_Position = value;
  }

  /**
   * Returns the position of the proposed actor.
   *
   * @return the position
   */
  public Integer getPosition() {
    return m_Position;
  }

  /**
   * Sets the actors in which to insert the proposed actor.
   *
   * @param value the actors
   */
  public void setActors(Actor[] value) {
    m_Actors = value;
  }

  /**
   * Returns the actors in which to insert the proposed actor.
   *
   * @return the actors
   */
  public Actor[] getActors() {
    return m_Actors;
  }

  /**
   * Sets the nodes in which to insert the proposed actor.
   *
   * @param value the nodes
   */
  public void setActorNodes(Node[] value) {
    m_ActorNodes = value;
  }

  /**
   * Returns the nodes in which to insert the proposed actor.
   *
   * @return the nodes
   */
  public Node[] getActorNodes() {
    return m_ActorNodes;
  }

  /**
   * Returns whether the proposed actor will get added at the first position.
   *
   * @return true if the actor gets added at the first position
   */
  public Boolean isFirst() {
    return (m_Position == 0);
  }

  /**
   * Returns whether the proposed actor will get added at the last position.
   *
   * @return true if the actor gets added at the last position
   */
  public Boolean isLast() {
    return (m_Position >= m_Actors.length);
  }

  /**
   * Checks whether the actor will get added before or after a standalone
   * actor.
   *
   * @param before whether the actor gets added before or after
   * @return true if the actor gets added before/after a standalone one
   */
  public Boolean isStandalone(boolean before) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result = (ActorUtils.isStandalone(m_Actors[m_Position + 1]));
      }
    }
    else {
      if (m_Position > 0) {
        result = (ActorUtils.isStandalone(m_Actors[m_Position - 1]));
      }
    }

    return result;
  }

  /**
   * Checks whether the actor will get added before or after a source
   * actor.
   *
   * @param before whether the actor gets added before or after
   * @return true if the actor gets added before/after a source one
   */
  public Boolean isSource(boolean before) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result = (ActorUtils.isSource(m_Actors[m_Position + 1]));
      }
    }
    else {
      if (m_Position > 0) {
        result = (ActorUtils.isSource(m_Actors[m_Position - 1]));
      }
    }

    return result;
  }

  /**
   * Checks whether the actor will get added before or after a transformer
   * actor.
   *
   * @param before whether the actor gets added before or after
   * @return true if the actor gets added before/after a transformer one
   */
  public Boolean isTransformer(boolean before) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result = (ActorUtils.isTransformer(m_Actors[m_Position + 1]));
      }
    }
    else {
      if (m_Position > 0) {
        result = (ActorUtils.isTransformer(m_Actors[m_Position - 1]));
      }
    }

    return result;
  }

  /**
   * Checks whether the actor will get added before or after a sink
   * actor.
   *
   * @param before whether the actor gets added before or after
   * @return true if the actor gets added before/after a sink one
   */
  public Boolean isSink(boolean before) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result = (ActorUtils.isSink(m_Actors[m_Position + 1]));
      }
    }
    else {
      if (m_Position > 0) {
        result = (ActorUtils.isSink(m_Actors[m_Position - 1]));
      }
    }

    return result;
  }

  /**
   * Checks whether the actor will get added before or after a specific
   * actor (exact classname or interface classname).
   *
   * @param before whether the actor gets added before or after
   * @param classname the name of the actor (or interface) to check against
   * @return true if the actor gets added before/after a specific one
   */
  public Boolean isClassname(boolean before, String classname) {
    boolean 	result;

    result = false;

    if (before) {
      if (m_Position + 1 < m_Actors.length) {
        result =    m_Actors[m_Position + 1].getClass().getName().equals(classname)
                 || ClassLocator.hasInterface(classname, m_Actors[m_Position + 1].getClass().getName());
      }
    }
    else {
      if (m_Position > 0) {
        result =    m_Actors[m_Position - 1].getClass().getName().equals(classname)
                 || ClassLocator.hasInterface(classname, m_Actors[m_Position - 1].getClass().getName());
      }
    }

    return result;
  }

  /**
   * Checks whether the parent is the specified classname.
   *
   * @param classname the class that parent must be
   * @param exact whether to perform exact classname matching (or just an instance of)
   * @param anyParent if any parent in the node hierarchy is tested
   * @return true if it is a match
   */
  public Boolean checkParent(String classname, boolean exact, boolean anyParent) {
    Node   parent;

    if (anyParent) {
      parent = getParentNode();
      while (parent != null) {
        if (exact) {
          if (parent.getActor().getClass().getName().equals(classname)) {
            m_LastParentNode = parent;
            m_LastParent     = parent.getActor();
            return true;
          }
        }
        else {
          if (   ClassLocator.getSingleton().isSubclass(classname, parent.getActor().getClass().getName())
              || ClassLocator.getSingleton().hasInterface(classname, parent.getActor().getClass().getName()) ) {
            m_LastParentNode = parent;
            m_LastParent     = parent.getActor();
            return true;
          }
        }

        parent = (Node) parent.getParent();
      }
    }
    else {
      if (exact) {
        if (getParent().getClass().getName().equals(classname)) {
          m_LastParentNode = getParentNode();
          m_LastParent     = getParent();
          return true;
        }
      }
      else {
        if (    ClassLocator.getSingleton().isSubclass(classname, getParent().getClass().getName())
             || ClassLocator.getSingleton().hasInterface(classname, getParent().getClass().getName()) ) {
          m_LastParentNode = getParentNode();
          m_LastParent     = getParent();
          return true;
        }
      }
    }

    return false;
  }

  /**
   * Checks whether the preceding actor generates the specified class.
   *
   * @param classname the class that the preceding actor must generate
   * @return true if the preceding actor generates the specified class
   */
  public Boolean precedingGenerates(String classname) {
    Class           cls;

    if (m_Position == 0)
      return false;

    try {
      cls = ClassManager.getSingleton().forName(classname);
    }
    catch (Exception e) {
      getHelper().getLogger().log(Level.SEVERE, "ActorSuggestion (preceding generates): Failed to instantiate class '" + classname + "'!", e);
      return false;
    }

    if (!(m_Actors[m_Position - 1] instanceof OutputProducer))
      return false;

    return (m_Compatibility.isCompatible(((OutputProducer) m_Actors[m_Position - 1]).generates(), new Class[]{cls}));
  }

  /**
   * Checks whether the following actor accepts the specified class.
   *
   * @param classname the class that the following actor must accept
   * @return true if the following actor accepts the specified class
   */
  public Boolean followingAccepts(String classname) {
    Class           cls;

    if (m_Position >= m_Actors.length - 1)
      return false;

    try {
      cls = ClassManager.getSingleton().forName(classname);
    }
    catch (Exception e) {
      getHelper().getLogger().log(Level.SEVERE, "ActorSuggestion (following accepts): Failed to instantiate class '" + classname + "'!", e);
      return false;
    }

    if (!(m_Actors[m_Position + 1] instanceof InputConsumer))
      return false;

    return (m_Compatibility.isCompatible(new Class[]{cls}, ((InputConsumer) m_Actors[m_Position + 1]).accepts()));
  }

  /**
   * Processes the commandline and fills in placeholders:
   * classname: ${PARENT.CLASS}, ${LASTPARENT.CLASS}, ${PRECEDING.CLASS}, ${FOLLOWING.CLASS}
   * actor's name: ${PARENT.NAME}, ${LASTPARENT.NAME}, ${PRECEDING.NAME}, ${FOLLOWING.NAME}
   * actor's full name: ${PARENT.FULL}, ${LASTPARENT.FULL}, ${PRECEDING.FULL}, ${FOLLOWING.FULL}
   *
   * @param cmdline the commandline to process
   * @return the fullname of the specified actor or empty string if not available
   * @see #m_LastParent
   * @see #m_LastParentNode
   */
  public String insertPlaceholders(String cmdline) {
    String result;

    result = cmdline;

    // classname
    if (result.contains("${PARENT.CLASS}"))
      result = result.replace("${PARENT.CLASS}", m_Parent.getClass().getName());
    if (result.contains("${LASTPARENT.CLASS}"))
      result = result.replace("${LASTPARENT.CLASS}", m_LastParent.getClass().getName());
    if (result.contains("${PRECEDING.CLASS}") && (m_Position > 0))
      result = result.replace("${PRECEDING.CLASS}", m_Actors[m_Position - 1].getClass().getName());
    if (result.contains("${FOLLOWING.CLASS}") && (m_Position < m_Actors.length - 1))
      result = result.replace("${FOLLOWING.CLASS}", m_Actors[m_Position + 1].getClass().getName());

    // name
    if (result.contains("${PARENT.NAME}"))
      result = result.replace("${PARENT.NAME}", m_Parent.getName());
    if (result.contains("${LASTPARENT.NAME}"))
      result = result.replace("${LASTPARENT.NAME}", m_LastParent.getName());
    if (result.contains("${PRECEDING.NAME}") && (m_Position > 0))
      result = result.replace("${PRECEDING.NAME}", m_Actors[m_Position - 1].getName());
    if (result.contains("${FOLLOWING.NAME}") && (m_Position < m_Actors.length - 1))
      result = result.replace("${FOLLOWING.NAME}", m_Actors[m_Position + 1].getName());

    // fullname
    if (result.contains("${PARENT.FULL}"))
      result = result.replace("${PARENT.FULL}", (m_ParentNode != null) ? m_ParentNode.getFullName() : m_Parent.getFullName());
    if (result.contains("${LASTPARENT.FULL}"))
      result = result.replace("${LASTPARENT.FULL}", (m_LastParentNode != null) ? m_LastParentNode.getFullName() : m_LastParent.getFullName());
    if (result.contains("${PRECEDING.FULL}") && (m_Position > 0))
      result = result.replace("${PRECEDING.FULL}", (m_ActorNodes != null) ? m_ActorNodes[m_Position - 1].getFullName() : m_Actors[m_Position - 1].getFullName());
    if (result.contains("${FOLLOWING.FULL}") && (m_Position < m_Actors.length - 1))
      result = result.replace("${FOLLOWING.FULL}", (m_ActorNodes != null) ? m_ActorNodes[m_Position + 1].getFullName() : m_Actors[m_Position + 1].getFullName());

    return result;
  }
:}

terminal String CLASSNAME, CMDLINE;
terminal String PARENT, ANYPARENT, PRECEDING, FOLLOWING;
terminal Boolean ISFIRST, ISLAST, ALLOWS, GENERATES, ACCEPTS;
terminal Boolean STANDALONE, SOURCE, TRANSFORMER, SINK;
terminal Boolean BOOLEAN, TRUE, FALSE;

terminal LPAREN, RPAREN;
terminal IF, THEN;
terminal AND, OR;
terminal BEFORE, AFTER;
terminal IS, LIKE, NOT;

non terminal rule;
non terminal expr_list, expr;
non terminal Boolean boolexpr;
non terminal String classexpr;
non terminal String cmdexpr;

precedence left AND, OR;
precedence left LPAREN, RPAREN;
precedence left NOT;

rule     ::=    expr expr_list
              | expr;

expr     ::=    IF boolexpr:e THEN cmdexpr:c
                {:
                  if (e && !c.isEmpty())
                    parser.setResult(AbstractActor.forCommandLine(parser.insertPlaceholders(c)));
                  else
                    parser.setResult(null);
                :} ;

boolexpr ::=    LPAREN boolexpr:b RPAREN
                {: RESULT = b; :}
              | BOOLEAN:b
                {: RESULT = b; :}
              | TRUE
                {: RESULT = true; :}
              | FALSE
                {: RESULT = false; :}
              | boolexpr:l AND boolexpr:r
                {: RESULT = l && r; :}
              | boolexpr:l OR boolexpr:r
                {: RESULT = l || r; :}
              | NOT boolexpr:b
                {: RESULT = !b; :}
              | ISFIRST
                {: RESULT = parser.isFirst(); :}
              | ISLAST
                {: RESULT = parser.isLast(); :}
              | PARENT IS classexpr:c
                {: RESULT = (boolean) (parser.checkParent(c, true, false)); :}
              | PARENT LIKE classexpr:c
                {: RESULT = (boolean) (parser.checkParent(c, false, false)); :}
              | PARENT ALLOWS STANDALONE
                {: RESULT = ((ActorHandler) parser.getParent()).getActorHandlerInfo().canContainStandalones(); :}
              | PARENT ALLOWS SOURCE
                {: RESULT = ((ActorHandler) parser.getParent()).getActorHandlerInfo().canContainSource(); :}
              | ANYPARENT IS classexpr:c
                {: RESULT = (boolean) (parser.checkParent(c, true, true)); :}
              | ANYPARENT LIKE classexpr:c
                {: RESULT = (boolean) (parser.checkParent(c, false, true)); :}
              | PRECEDING GENERATES classexpr:c
                {: RESULT = parser.precedingGenerates(c); :}
              | FOLLOWING ACCEPTS classexpr:c
                {: RESULT = parser.followingAccepts(c); :}
              | BEFORE STANDALONE
                {: RESULT = parser.isStandalone(true); :}
              | AFTER STANDALONE
                {: RESULT = parser.isStandalone(false); :}
              | BEFORE SOURCE
                {: RESULT = parser.isSource(true); :}
              | AFTER SOURCE
                {: RESULT = parser.isSource(false); :}
              | BEFORE TRANSFORMER
                {: RESULT = parser.isTransformer(true); :}
              | AFTER TRANSFORMER
                {: RESULT = parser.isTransformer(false); :}
              | BEFORE SINK
                {: RESULT = parser.isSink(true); :}
              | AFTER SINK
                {: RESULT = parser.isSink(false); :}
              | BEFORE classexpr:c
                {: RESULT = parser.isClassname(true, c); :}
              | AFTER classexpr:c
                {: RESULT = parser.isClassname(false, c); :}
              ;

classexpr ::=   CLASSNAME:c
                {: RESULT = c; :}
              ;

cmdexpr ::=     CLASSNAME:c
                {: RESULT = c; :}
              | CMDLINE:c
                {: RESULT = c; :}
              ;
