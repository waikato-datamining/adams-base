<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

  <modelVersion>4.0.0</modelVersion>

  <groupId>nz.ac.waikato.cms.adams</groupId>
  <artifactId>adams-pom</artifactId>
  <version>24.1.1-SNAPSHOT</version>
  <packaging>pom</packaging>

  <name>adams-pom</name>
  <description>The project object model for all ADAMS-derived modules.</description>
  <url>https://adams.cms.waikato.ac.nz/</url>
  <organization>
    <name>University of Waikato, Hamilton, NZ</name>
    <url>http://www.waikato.ac.nz/</url>
  </organization>
  <licenses>
    <license>
      <name>GNU General Public License 3</name>
      <url>http://www.gnu.org/licenses/gpl-3.0.txt</url>
    </license>
  </licenses>

  <modules>
    <module>adams-access</module>
    <module>adams-compress</module>
    <module>adams-core</module>
    <module>adams-db</module>
    <module>adams-db-mysql8</module>
    <module>adams-event</module>
    <module>adams-excel</module>
    <module>adams-groovy</module>
    <module>adams-imaging</module>
    <module>adams-imaging-boofcv</module>
    <module>adams-json</module>
    <module>adams-math</module>
    <module>adams-matlab</module>
    <module>adams-meta</module>
    <module>adams-ml</module>
    <module>adams-net</module>
    <module>adams-odf</module>
    <module>adams-opencv</module>
    <module>adams-pdf</module>
    <module>adams-pyro4</module>
    <module>adams-pyro5</module>
    <module>adams-python</module>
    <module>adams-rsync</module>
    <module>adams-scripts</module>
    <module>adams-scripts-debian</module>
    <module>adams-spreadsheet</module>
    <module>adams-timeseries</module>
    <module>adams-visualstats</module>
    <module>adams-weka</module>
    <module>adams-xml</module>
    <module>adams-yaml</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <maven.compiler.source>11</maven.compiler.source>
    <maven.compiler.target>11</maven.compiler.target>
    <timestamp>${maven.build.timestamp}</timestamp>
    <maven.build.timestamp.format>yyyy-MM-dd HH:mm:ss</maven.build.timestamp.format>
    <heap.size>-Xmx512m</heap.size>
    <!-- tests -->
    <adams.test.multiprocess.enabled>false</adams.test.multiprocess.enabled>
    <adams.test.flow.dump.file />
    <adams.test.flow.dump.append>true</adams.test.flow.dump.append>
    <!-- classes -->
    <class.adams.env>adams.env.Environment</class.adams.env>
    <class.adams.main>adams.gui.Main</class.adams.main>
    <class.adams.flowrunner>adams.flow.FlowRunner</class.adams.flowrunner>
    <class.adams.flowsetuprunner>adams.flow.FlowSetupRunner</class.adams.flowsetuprunner>
    <!-- module-dependent -->
    <cxf.version>3.5.3</cxf.version>
    <xercesimpl.version>2.12.2</xercesimpl.version>
    <xjc.version>3.3.1</xjc.version>
    <sun.jaxb.version>3.0.2</sun.jaxb.version>
    <javax.jaxb.version>2.3.1</javax.jaxb.version>
    <javax.activation.version>1.1.1</javax.activation.version>
    <javaws.version>3.0.2</javaws.version>
    <jetty.version>9.4.51.v20230217</jetty.version>
    <moa.version>2023.04.0</moa.version>
    <weka.version>3.9.6-fork-0.0.2</weka.version>
    <weka-lts.version>3.9.0-fork-0.0.13</weka-lts.version>
    <postgresql.version>42.7.1</postgresql.version>
    <postgis.version>2.2.1</postgis.version>
    <jodd.version>5.1.6</jodd.version>
    <boofcv.version>0.18</boofcv.version>
    <openimaj.version>1.3.1</openimaj.version>
    <nd4j.version>1.0.0-beta2</nd4j.version>
    <openblas.version>0.2.19-1.3</openblas.version>
    <jackson.version>2.5.1</jackson.version>
    <requests4j.version>0.2.5</requests4j.version>
    <matrix-algorithms.version>0.0.15</matrix-algorithms.version>
    <snakeyaml.version>2.2</snakeyaml.version>
    <jsonpath.version>2.8.0</jsonpath.version>
    <jsonsmart.version>2.5.0</jsonsmart.version>
    <gson.version>2.10.1</gson.version>
    <debianmavenplugin.version>1.0.22</debianmavenplugin.version>
    <rpmmavenplugin.version>1.4.0</rpmmavenplugin.version>
    <javacv.version>1.5.9</javacv.version>
    <commons-codec.version>1.16.0</commons-codec.version>
    <owasp.dependency.check.skip>true</owasp.dependency.check.skip>
  </properties>

  <scm>
    <connection>scm:git:ssh://git@github.com/waikato-datamining/adams-base</connection>
    <developerConnection>scm:git:ssh://git@github.com/waikato-datamining/adams-base</developerConnection>
    <url>https://github.com/waikato-datamining/adams-base</url>
    <tag>HEAD</tag>
  </scm>

  <distributionManagement>
    <snapshotRepository>
      <id>adams-snapshots</id>
      <name>ADAMS Snapshot Repository</name>
      <url>https://adams.cms.waikato.ac.nz/nexus/content/repositories/adams-snapshots</url>
    </snapshotRepository>
    <repository>
      <id>adams-releases</id>
      <name>ADAMS Release Repository</name>
      <url>https://adams.cms.waikato.ac.nz/nexus/content/repositories/adams-releases</url>
    </repository>
  </distributionManagement>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>junit</groupId>
        <artifactId>junit</artifactId>
        <version>4.13.1</version>
        <type>jar</type>
      </dependency>

      <dependency>
        <groupId>com.github.fracpete</groupId>
        <artifactId>sizeofag</artifactId>
        <version>1.0.4</version>
      </dependency>

      <dependency>
        <groupId>com.googlecode.java-diff-utils</groupId>
        <artifactId>diffutils</artifactId>
        <version>1.2.1</version>
      </dependency>

      <dependency>
        <groupId>com.github.vbmacher</groupId>
        <artifactId>java-cup</artifactId>
        <version>11b-20160615</version>
      </dependency>

      <dependency>
        <groupId>com.github.vbmacher</groupId>
        <artifactId>java-cup-runtime</artifactId>
        <version>11b-20160615</version>
      </dependency>
    </dependencies>
  </dependencyManagement>

  <profiles>
    <profile>
      <id>javadoc-generation</id>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-site-plugin</artifactId>
            <version>3.3</version>
            <configuration>
              <reportPlugins>
                <plugin>
                  <groupId>org.apache.maven.plugins</groupId>
                  <artifactId>maven-javadoc-plugin</artifactId>
                  <version>2.9</version>
                  <reportSets>
                    <reportSet>
                      <id>aggregate</id>
                      <reports>
                        <report>aggregate</report>
                      </reports>
                    </reportSet>
                  </reportSets>
                  <configuration>
                    <show>protected</show>
                    <nohelp>true</nohelp>
                    <additionalparam>-Xdoclint:none</additionalparam>
                    <additionalJOption>--no-module-directories</additionalJOption>
                  </configuration>
                </plugin>
              </reportPlugins>
            </configuration>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <build>
    <pluginManagement>
      <plugins>
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-compiler-plugin</artifactId>
          <version>3.12.1</version>
          <configuration>
            <source>${maven.compiler.source}</source>
            <target>${maven.compiler.target}</target>
            <compilerArgs>
              <arg>--add-exports</arg>
              <arg>java.base/jdk.internal.misc=ALL-UNNAMED</arg>
              <arg>--add-exports</arg>
              <arg>java.desktop/sun.awt.image=ALL-UNNAMED</arg>
              <arg>--add-exports</arg>
              <arg>java.desktop/com.sun.media.sound=ALL-UNNAMED</arg>
            </compilerArgs>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-assembly-plugin</artifactId>
          <version>2.2</version>
        </plugin>

        <plugin>
          <groupId>com.github.fracpete</groupId>
          <artifactId>latex-maven-plugin</artifactId>
          <version>1.4.2</version>
          <executions>
            <execution>
              <phase>package</phase>
              <goals>
                <goal>latex</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
    
        <plugin>
          <groupId>org.bsc.maven</groupId>
          <artifactId>maven-processor-plugin</artifactId>
          <version>2.0.5</version>
          <executions>
            <execution>
              <id>process</id>
              <goals>
                <goal>process</goal>
              </goals>
              <phase>process-classes</phase>
              <configuration>
                <processors>
                   <processor>adams.core.annotation.MixedCopyrightProcessor</processor>
                   <processor>adams.core.annotation.ThirdPartyCopyrightProcessor</processor>
                </processors>
                <options>
                  <printheader>true</printheader>
                  <module>${project.artifactId}</module>
                  <output>${project.build.directory}/${project.artifactId}-${project.version}</output>
                </options>
              </configuration> 
            </execution>
          </executions>
        </plugin>         

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-jar-plugin</artifactId>
          <version>2.3.2</version>
          <executions>
            <execution>
              <goals>
                <goal>test-jar</goal>
              </goals>
            </execution>
          </executions>
        </plugin>

        <!-- update license file: mvn license:add-third-party -DuseMissingFile -->    
        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>license-maven-plugin</artifactId>
          <version>1.9</version>
          <executions>
            <execution>
              <id>add-third-party</id>
              <goals>
                <goal>add-third-party</goal>
              </goals>
              <configuration>
                <excludedScopes>system,test</excludedScopes>
                <excludedGroups>(de.jflex)</excludedGroups>
              </configuration>
            </execution>
          </executions>
        </plugin>         

        <!--
        example usage: mvn test, mvn test -Dtest=testclassname
        output: target/surefire-reports/
        -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-surefire-plugin</artifactId>
          <version>2.15</version>
          <configuration>
            <includes>
              <include>**/*Test.java</include>
            </includes>
            <disableXmlReport>true</disableXmlReport>
            <redirectTestOutputToFile>true</redirectTestOutputToFile>
            <systemPropertyVariables>
              <adams.env.class>${class.adams.env}</adams.env.class>
              <adams.test.multiprocess.enabled>${adams.test.multiprocess.enabled}</adams.test.multiprocess.enabled>
              <adams.test.flow.dump.file>${adams.test.flow.dump.file}</adams.test.flow.dump.file>
              <adams.test.flow.dump.append>${adams.test.flow.dump.append}</adams.test.flow.dump.append>
            </systemPropertyVariables>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-release-plugin</artifactId>
          <version>2.5.1</version>
          <configuration>
            <useReleaseProfile>false</useReleaseProfile>
            <localCheckout>true</localCheckout>
            <pushChanges>true</pushChanges>
            <commitByProject>true</commitByProject>
          </configuration>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>versions-maven-plugin</artifactId>
          <version>1.2</version>
        </plugin>

        <plugin>
          <groupId>org.codehaus.mojo</groupId>
          <artifactId>build-helper-maven-plugin</artifactId>
          <version>1.7</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-site-plugin</artifactId>
          <version>3.7.1</version>
        </plugin>

        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-project-info-reports-plugin</artifactId>
          <version>2.9</version>
        </plugin>

        <!-- generates dependency graphs, get pdfs/flows/sources -->
        <plugin>
          <groupId>org.apache.maven.plugins</groupId>
          <artifactId>maven-dependency-plugin</artifactId>
          <version>2.10</version>
          <executions>
            <!-- graph with just adams -->
            <execution>
              <id>tree</id>
              <phase>package</phase>
              <goals>
                <goal>tree</goal>
              </goals>
              <configuration>
                <outputType>graphml</outputType>
                <outputFile>${project.build.directory}/${project.artifactId}-${project.version}.graphml</outputFile>
                <includes>${project.groupId}:*</includes>
              </configuration>
            </execution>
            <!-- graph with all deps -->
            <execution>
              <id>tree-all</id>
              <phase>package</phase>
              <goals>
                <goal>tree</goal>
              </goals>
              <configuration>
                <outputType>graphml</outputType>
                <outputFile>${project.build.directory}/${project.artifactId}-${project.version}-all.graphml</outputFile>
              </configuration>
            </execution>
            <!-- get all binary jars -->
            <!-- used for .rpm generation -->
            <execution>
              <id>linux-jars</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>copy-dependencies</goal>
              </goals>
              <configuration>
                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                <outputDirectory>${project.build.directory}/linux-jars</outputDirectory>
                <includeScope>compile</includeScope>
                <excludeClassifiers>scripts,android-arm,android-arm64,android-x86,android-x86_64,ios-arm64,ios-x86_64,linux-armhf,linux-ppc64le,linux-x86,macosx-x86_64,windows-x86_64,windows-x86,native</excludeClassifiers>
                <excludeArtifactIds>netlib-native_ref-osx-x86_64,netlib-native_ref-win-x86_64,netlib-native_system-osx-x86_64,netlib-native_system-win-x86_64</excludeArtifactIds>
              </configuration>
            </execution>
            <!-- get all doc jars -->
            <execution>
              <id>doc</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>unpack-dependencies</goal>
              </goals>
              <configuration>
                <classifier>doc</classifier>
                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                <outputDirectory>${project.build.directory}/doc</outputDirectory>
                <includeGroupIds>${project.groupId}</includeGroupIds>
              </configuration>
            </execution>
            <!-- get all flow jars -->
            <execution>
              <id>flows</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>unpack-dependencies</goal>
              </goals>
              <configuration>
                <classifier>flows</classifier>
                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                <outputDirectory>${project.build.directory}/flows</outputDirectory>
                <includeGroupIds>${project.groupId}</includeGroupIds>
              </configuration>
            </execution>
            <!-- get all scripts jars -->
            <execution>
              <id>scripts</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>unpack-dependencies</goal>
              </goals>
              <configuration>
                <includeArtifactIds>adams-scripts</includeArtifactIds>
                <classifier>scripts</classifier>
                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                <outputDirectory>${project.build.directory}/scripts</outputDirectory>
                <includeGroupIds>${project.groupId}</includeGroupIds>
              </configuration>
            </execution>
            <!-- get all debian scripts jars -->
            <execution>
              <id>scripts-debian</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>unpack-dependencies</goal>
              </goals>
              <configuration>
                <includeArtifactIds>adams-scripts-debian</includeArtifactIds>
                <classifier>scripts</classifier>
                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                <outputDirectory>${project.build.directory}/scripts-debian</outputDirectory>
                <includeGroupIds>${project.groupId}</includeGroupIds>
              </configuration>
            </execution>
            <!-- get wsdl jars -->
            <!--execution>
              <id>wsdl</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>unpack-dependencies</goal>
              </goals>
              <configuration>
                <includeArtifactIds>artifact1,artifact2,...</includeArtifactIds>
                <classifier>wsdl</classifier>
                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                <outputDirectory>${project.build.directory}/wsdl</outputDirectory>
                <includeGroupIds>${project.groupId}</includeGroupIds>
              </configuration>
            </execution-->
            <!-- get all source jars -->
            <execution>
              <id>sources</id>
              <phase>prepare-package</phase>
              <goals>
                <goal>copy-dependencies</goal>
              </goals>
              <configuration>
                <classifier>sources</classifier>
                <failOnMissingClassifierArtifact>false</failOnMissingClassifierArtifact>
                <outputDirectory>${project.build.directory}/sources</outputDirectory>
                <includeGroupIds>${project.groupId}</includeGroupIds>
              </configuration>
            </execution>
          </executions>
        </plugin>
        <plugin>
          <groupId>org.owasp</groupId>
          <artifactId>dependency-check-maven</artifactId>
          <version>9.0.8</version>
          <configuration>
            <skip>${owasp.dependency.check.skip}</skip>
          </configuration>
          <executions>
            <execution>
              <goals>
                <goal>check</goal>
              </goals>
            </execution>
          </executions>
        </plugin>
      </plugins>
    </pluginManagement>

    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
        <version>2.4.1</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>.</directory>
              <includes>
                <include>**/*~</include>
                <include>**/.attach_pid*</include>
                <include>**/hs_err_pid*</include>
                <include>**/.DS_Store</include>
                <include>**/*-manual.aux</include>
                <include>**/*-manual.lof</include>
                <include>**/*-manual.log</include>
                <include>**/*-manual.out</include>
                <include>**/*-manual.pdf</include>
                <include>**/*-manual.toc</include>
                <include>**/*-manual.pdf</include>
              </includes>
              <followSymlinks>false</followSymlinks>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <!--
      example usage for displaying licenses: mvn displaylicense:displaylicense
      -->
      <plugin>
        <groupId>net.surguy</groupId>
        <artifactId>maven-displaylicense-plugin</artifactId>
        <version>0.5</version>
      </plugin>
    </plugins>

    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
        <includes>
          <include>**/Module.props</include>
        </includes>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>false</filtering>
        <excludes>
          <exclude>**/Module.props</exclude>
        </excludes>
      </resource>
    </resources>
  </build>
</project>
