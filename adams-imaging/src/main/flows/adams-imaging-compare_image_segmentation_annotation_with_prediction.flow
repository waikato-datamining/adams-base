# Project: adams
# Date: 2023-02-16 14:33:17
# User: fracpete
# Charset: UTF-8
#
adams.flow.control.Flow -annotation "Allows the comparison of image segmentation predictions with their corresponding annotations." -flow-execution-listener adams.flow.execution.NullListener -flow-restart-manager adams.flow.control.flowrestart.NullManager
 adams.flow.standalone.CallableActors
  adams.flow.sink.ProgressBar -display-type adams.flow.core.displaytype.Default -writer adams.gui.print.NullWriter -max @{max}
 adams.flow.source.Start
 adams.flow.control.Trigger -name "prompt user"
  adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}.props -value-type FILE_FORWARD_SLASHES -expand-value true
  adams.flow.source.EnterManyValues -stop-if-canceled true -value "adams.flow.source.valuedefinition.DirectoryValueDefinition -name annotation_dir -display \"Directory with annotations\" -file-chooser-title Annotations -use-forward-slashes true" -value "adams.flow.source.valuedefinition.ListSelectionValueDefinition -name annotation_reader -display \"Reader for annotations\" -help \"the format the annotations are in\" -value bluechannel -value indexed_png -value grayscale -default-value bluechannel" -value "adams.flow.source.valuedefinition.DirectoryValueDefinition -name prediction_dir -display \"Directory with predictions\" -file-chooser-title Predictions -use-forward-slashes true" -value "adams.flow.source.valuedefinition.ListSelectionValueDefinition -name prediction_reader -display \"Reader for predictions\" -help \"the format the predictions are in\" -value bluechannel -value indexed_png -value grayscale -default-value bluechannel" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name layers -display Layers -help \"blank-separated list\" -default-value \"layer1 layer2\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name skip_first -display \"Skip first layer?\" -help \"first layer is usually the background\" -type BOOLEAN -default-value true" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name add_misclassification -display \"Add misclassification information?\" -type BOOLEAN -default-value true" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name save_output -display \"Save output as CSV?\" -type BOOLEAN -default-value false" -value "adams.flow.source.valuedefinition.FileValueDefinition -name output_file -display \"Output file\" -help \"where to store the generated spreadheet\" -file-chooser-title \"Select output CSV\" -extension csv -use-forward-slashes true" -output-type MAP -restoration-enabled true -restoration-file @{restore}
  adams.flow.transformer.MapToVariables
 adams.flow.control.Trigger -name iterate
  adams.flow.standalone.SetVariable -name reset -var-name count -var-value 0
  adams.flow.source.FileSystemSearch -output-array true -search "adams.flow.source.filesystemsearch.LocalFileSearch -directory @{annotation_dir} -regexp .*\\\\.jpg -sorting SORT_BY_NAME" -use-forward-slashes true
  adams.flow.control.Tee -name "# files"
   adams.flow.transformer.ArrayLength
   adams.flow.transformer.SetVariable -var-name max
  adams.flow.transformer.ArrayToSequence
  adams.flow.control.Tee -name progress
   adams.flow.transformer.IncVariable -var-name count -output-variable-value true
   adams.flow.sink.CallableSink -callable ProgressBar
  adams.flow.control.Tee -name filename
   adams.flow.transformer.BaseName
   adams.flow.transformer.SetVariable -var-name file
   adams.flow.transformer.Convert -conversion adams.data.conversion.ReplaceFileExtension
   adams.flow.transformer.SetVariable -name "SetVariable (2)" -var-name entry
  adams.flow.control.Trigger -name annotation
   adams.flow.source.CombineVariables -expression @{annotation_dir}/@{file} -conversion adams.data.conversion.StringToString
   adams.flow.control.Switch -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{annotation_reader}\\\\\\\" = \\\\\\\"bluechannel\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{annotation_reader}\\\\\\\" = \\\\\\\"indexed_png\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{annotation_reader}\\\\\\\" = \\\\\\\"grayscale\\\\\\\"\"" -condition adams.flow.condition.bool.True -lenient true
    adams.flow.transformer.ImageSegmentationFileReader -name bluechannel -reader "adams.data.io.input.BlueChannelImageSegmentationReader -skip-first-layer @{skip_first} -layer-name @{layers} -reader \"adams.data.io.input.PNGImageReader -color-provider adams.gui.visualization.core.DefaultColorProvider\""
    adams.flow.transformer.ImageSegmentationFileReader -name indexed_png -reader "adams.data.io.input.IndexedPNGImageSegmentationReader -skip-first-layer @{skip_first} -layer-name @{layers}"
    adams.flow.transformer.ImageSegmentationFileReader -name grayscale -reader "adams.data.io.input.GrayscaleImageSegmentationReader -skip-first-layer @{skip_first} -layer-name @{layers} -reader \"adams.data.io.input.PNGImageReader -color-provider adams.gui.visualization.core.DefaultColorProvider\""
    adams.flow.control.Stop -stop-msg "Unhandled annotation reader: @{annotation_reader}"
   adams.flow.transformer.SetStorageValue -storage-name annotation
  adams.flow.control.Trigger -name prediction
   adams.flow.source.CombineVariables -expression @{prediction_dir}/@{file} -conversion adams.data.conversion.StringToString
   adams.flow.control.Switch -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{prediction_reader}\\\\\\\" = \\\\\\\"bluechannel\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{prediction_reader}\\\\\\\" = \\\\\\\"indexed_png\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{prediction_reader}\\\\\\\" = \\\\\\\"grayscale\\\\\\\"\"" -condition adams.flow.condition.bool.True -lenient true
    adams.flow.transformer.ImageSegmentationFileReader -name bluechannel -reader "adams.data.io.input.BlueChannelImageSegmentationReader -skip-first-layer @{skip_first} -layer-name @{layers} -reader \"adams.data.io.input.PNGImageReader -color-provider adams.gui.visualization.core.DefaultColorProvider\""
    adams.flow.transformer.ImageSegmentationFileReader -name indexed_png -reader "adams.data.io.input.IndexedPNGImageSegmentationReader -skip-first-layer @{skip_first} -layer-name @{layers}"
    adams.flow.transformer.ImageSegmentationFileReader -name grayscale -reader "adams.data.io.input.GrayscaleImageSegmentationReader -skip-first-layer @{skip_first} -layer-name @{layers} -reader \"adams.data.io.input.PNGImageReader -color-provider adams.gui.visualization.core.DefaultColorProvider\""
    adams.flow.control.Stop -stop-msg "Unhandled prediction reader: @{prediction_reader}"
   adams.flow.transformer.SetStorageValue -storage-name prediction
  adams.flow.control.Trigger -name compare
   adams.flow.source.StorageValuesArray -storage-name prediction -storage-name annotation -conversion adams.data.conversion.UnknownToUnknown
   adams.flow.transformer.ImageSegmentationContainerOperation -operation "adams.data.image.imagesegmentationcontainer.EvaluatePrediction -add-misclassification @{add_misclassification}"
   adams.flow.transformer.SpreadSheetInsertColumn -no-copy true -position first -header File -value @{entry}
   adams.flow.transformer.SpreadSheetAppend -storage-name sheet
 adams.flow.control.CloseCallableDisplay -callable ProgressBar
 adams.flow.control.Trigger -name display
  adams.flow.source.StorageValue -storage-name sheet -conversion adams.data.conversion.UnknownToUnknown
  adams.flow.control.ConditionalTee -name "save CSV" -condition "adams.flow.condition.bool.Expression -expression \"@{save_output} = true\""
   adams.flow.sink.SpreadSheetFileWriter -output @{output_file} -writer adams.data.io.output.CsvSpreadSheetWriter
  adams.flow.sink.SpreadSheetDisplay -display-type adams.flow.core.displaytype.Default -width 800 -height 600 -cell-rendering-customizer adams.gui.core.spreadsheettable.DefaultCellRenderingCustomizer -allow-search true -writer adams.data.io.output.NullWriter -preview adams.gui.core.spreadsheetpreview.NullPreview