/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * SimplifyPolygons.java
 * Copyright (C) 2025 University of Waikato, Hamilton, New Zealand
 */

package adams.data.objectfilter;

import adams.core.QuickInfoHelper;
import adams.flow.transformer.locateobjects.LocatedObject;
import adams.flow.transformer.locateobjects.LocatedObjects;
import com.goebl.simplify.Simplify;

import java.awt.Polygon;

/**
 * Simplifies polygons, i.e., to use fewer points. Useful for polygons
 * generated by models, which can be very detailed.
 *
 * @author fracpete (fracpete at waikato dot ac dot nz)
 */
public class SimplifyPolygons
  extends AbstractObjectFilter {

  private static final long serialVersionUID = -3865626476883847402L;

  /**
   * Container class for the simplification.
   */
  public static class PPoint
    implements com.goebl.simplify.Point {

    protected int m_X;

    protected int m_Y;

    public PPoint(int x, int y) {
      m_X = x;
      m_Y = y;
    }

    @Override
    public double getX() {
      return m_X;
    }

    @Override
    public double getY() {
      return m_Y;
    }
  }

  /** the tolerance parameter. */
  protected double m_Tolerance;

  /** whether to use high-quality or fast simplification. */
  protected boolean m_HighQuality;

  /**
   * Returns a string describing the object.
   *
   * @return a description suitable for displaying in the gui
   */
  @Override
  public String globalInfo() {
    return "Simplifies polygons, i.e., to use fewer points. Useful for polygons generated by models, which can be very detailed.";
  }

  /**
   * Adds options to the internal list of options.
   */
  @Override
  public void defineOptions() {
    super.defineOptions();

    m_OptionManager.add(
      "tolerance", "tolerance",
      0.0, 0.0, null);

    m_OptionManager.add(
      "high-quality", "highQuality",
      false);
  }

  /**
   * Sets the tolerance for the simplification.
   *
   * @param value	the tolerance
   */
  public void setTolerance(double value) {
    if (getOptionManager().isValid("tolerance", value)) {
      m_Tolerance = value;
      reset();
    }
  }

  /**
   * Returns the tolerance for the simplification.
   *
   * @return		the tolerance
   */
  public double getTolerance() {
    return m_Tolerance;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String toleranceTipText() {
    return "The tolerance to use for the simplification.";
  }

  /**
   * Sets whether to generate high-quality of be fast.
   *
   * @param value	true if high-quality
   */
  public void setHighQuality(boolean value) {
    m_HighQuality = value;
    reset();
  }

  /**
   * Returns whether to generate high-quality of be fast.
   *
   * @return		true if high-quality
   */
  public boolean getHighQuality() {
    return m_HighQuality;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String highQualityTipText() {
    return "If enabled, Douglas-Peucker is used instead of Radial-Distance.";
  }

  /**
   * Returns a quick info about the actor, which will be displayed in the GUI.
   *
   * @return		null if no info available, otherwise short string
   */
  @Override
  public String getQuickInfo() {
    String	result;

    result  = QuickInfoHelper.toString(this, "tolerance", m_Tolerance, "tolerance: ");
    result += QuickInfoHelper.toString(this, "highQuality", (m_HighQuality ? "high-quality" : "fast"), ", ");

    return result;
  }

  /**
   * Filters the image objects.
   *
   * @param objects the objects to filter
   * @return the updated object list
   */
  @Override
  protected LocatedObjects doFilter(LocatedObjects objects) {
    LocatedObjects	result;
    Simplify<PPoint> 	simplify;
    int			i;
    int[]		x;
    int[]		y;
    PPoint[] 		pointsOld;
    PPoint[]		pointsNew;

    result   = new LocatedObjects();
    simplify = new Simplify<>(new PPoint[0]);

    for (LocatedObject obj: objects) {
      obj = obj.getClone();
      if (obj.hasPolygon()) {
	x = obj.getPolygonX();
	y = obj.getPolygonY();
	if (isLoggingEnabled())
	  getLogger().info("# points - before: " + x.length);
	pointsOld = new PPoint[x.length];
	for (i = 0; i < x.length; i++)
	  pointsOld[i] = new PPoint(x[i], y[i]);
	pointsNew = simplify.simplify(pointsOld, m_Tolerance, m_HighQuality);
	x = new int[pointsNew.length];
	y = new int[pointsNew.length];
	for (i = 0; i < pointsNew.length; i++) {
	  x[i] = (int) pointsNew[i].getX();
	  y[i] = (int) pointsNew[i].getY();
	}
	if (isLoggingEnabled())
	  getLogger().info("# points - after: " + x.length);
	obj.setPolygon(new Polygon(x, y, x.length));
      }
      result.add(obj);
    }

    return result;
  }
}
