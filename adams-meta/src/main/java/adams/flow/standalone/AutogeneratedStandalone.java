/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*
 * AutogeneratedStandalone.java
 * Copyright (C) 2018-2025 University of Waikato, Hamilton, NZ
 */

package adams.flow.standalone;

import adams.core.Utils;
import adams.flow.core.Actor;
import adams.flow.core.AutogeneratedActor;
import adams.flow.processor.RemoveAutogeneratedActors;
import org.apache.commons.lang3.time.StopWatch;

/**
 <!-- globalinfo-start -->
 * Container for auto-generated standalone actors.<br>
 * Can be removed with the adams.flow.processor.RemoveAutogeneratedActors processor.
 * <br><br>
 <!-- globalinfo-end -->
 *
 <!-- options-start -->
 * <pre>-logging-level &lt;OFF|SEVERE|WARNING|INFO|CONFIG|FINE|FINER|FINEST&gt; (property: loggingLevel)
 * &nbsp;&nbsp;&nbsp;The logging level for outputting errors and debugging output.
 * &nbsp;&nbsp;&nbsp;default: WARNING
 * </pre>
 *
 * <pre>-name &lt;java.lang.String&gt; (property: name)
 * &nbsp;&nbsp;&nbsp;The name of the actor.
 * &nbsp;&nbsp;&nbsp;default: AutogeneratedStandalone
 * </pre>
 *
 * <pre>-annotation &lt;adams.core.base.BaseAnnotation&gt; (property: annotations)
 * &nbsp;&nbsp;&nbsp;The annotations to attach to this actor.
 * &nbsp;&nbsp;&nbsp;default:
 * </pre>
 *
 * <pre>-skip &lt;boolean&gt; (property: skip)
 * &nbsp;&nbsp;&nbsp;If set to true, transformation is skipped and the input token is just forwarded
 * &nbsp;&nbsp;&nbsp;as it is.
 * &nbsp;&nbsp;&nbsp;default: false
 * </pre>
 *
 * <pre>-stop-flow-on-error &lt;boolean&gt; (property: stopFlowOnError)
 * &nbsp;&nbsp;&nbsp;If set to true, the flow execution at this level gets stopped in case this
 * &nbsp;&nbsp;&nbsp;actor encounters an error; the error gets propagated; useful for critical
 * &nbsp;&nbsp;&nbsp;actors.
 * &nbsp;&nbsp;&nbsp;default: false
 * </pre>
 *
 * <pre>-silent &lt;boolean&gt; (property: silent)
 * &nbsp;&nbsp;&nbsp;If enabled, then no errors are output in the console; Note: the enclosing
 * &nbsp;&nbsp;&nbsp;actor handler must have this enabled as well.
 * &nbsp;&nbsp;&nbsp;default: false
 * </pre>
 *
 * <pre>-finish-before-stopping &lt;boolean&gt; (property: finishBeforeStopping)
 * &nbsp;&nbsp;&nbsp;If enabled, actor first finishes processing all data before stopping.
 * &nbsp;&nbsp;&nbsp;default: false
 * </pre>
 *
 * <pre>-stopping-timeout &lt;int&gt; (property: stoppingTimeout)
 * &nbsp;&nbsp;&nbsp;The timeout in milliseconds when waiting for actors to finish (&lt;= 0 for
 * &nbsp;&nbsp;&nbsp;infinity; see 'finishBeforeStopping').
 * &nbsp;&nbsp;&nbsp;default: -1
 * &nbsp;&nbsp;&nbsp;minimum: -1
 * </pre>
 *
 * <pre>-actor &lt;adams.flow.core.Actor&gt; [-actor ...] (property: actors)
 * &nbsp;&nbsp;&nbsp;The standalone actors grouped by this container.
 * &nbsp;&nbsp;&nbsp;default:
 * </pre>
 *
 <!-- options-end -->
 *
 * @author FracPete (fracpete at waikato dot ac dot nz)
 */
public class AutogeneratedStandalone
  extends Standalones
  implements AutogeneratedActor {

  private static final long serialVersionUID = -4371755952682752628L;
  
  /** whether to output timing. */
  protected boolean m_OutputTiming;

  /**
   * Default constructor.
   */
  public AutogeneratedStandalone() {
    super();
  }

  /**
   * Encapsulates the specified actor.
   * Automatically uses its name with the {@link #PREFIX_AUTOGEN} prefix.
   *
   * @param actor 	the actor to encapsulate
   */
  public AutogeneratedStandalone(Actor actor) {
    this();
    setName(PREFIX_AUTOGEN + actor.getName());
    setActors(new Actor[]{actor});
  }

  /**
   * Encapsulates the specified actors.
   *
   * @param actors 	the actors to encapsulate
   */
  public AutogeneratedStandalone(Actor[] actors) {
    this();
    setActors(actors);
  }

  /**
   * Returns a string describing the object.
   *
   * @return 			a description suitable for displaying in the gui
   */
  @Override
  public String globalInfo() {
    return "Container for auto-generated standalone actors.\n"
      + "Can be removed with the " + Utils.classToString(RemoveAutogeneratedActors.class) + " processor.";
  }

  /**
   * Adds options to the internal list of options.
   */
  @Override
  public void defineOptions() {
    super.defineOptions();

    m_OptionManager.add(
      "output-timing", "outputTiming",
      false);
  }

  /**
   * Sets whether to output the duration of the execution.
   *
   * @param value 	true if to output
   */
  public void setOutputTiming(boolean value) {
    m_OutputTiming = value;
    reset();
  }

  /**
   * Returns whether to output the duration of the execution.
   *
   * @return 		true if to output
   */
  public boolean getOutputTiming() {
    return m_OutputTiming;
  }

  /**
   * Returns the tip text for this property.
   *
   * @return 		tip text for this property suitable for
   * 			displaying in the GUI or for listing the options.
   */
  public String outputTimingTipText() {
    return "If enabled, outputs the time it took for execution, either using the logger or stdout.";
  }

  @Override
  protected String doExecute() {
    String	result;
    StopWatch	watch;

    watch = new StopWatch();
    watch.start();

    result = super.doExecute();

    watch.stop();
    if (m_OutputTiming) {
      if (isLoggingEnabled())
	getLogger().info("Time to execute " + getName() + ": " + watch.getTime() + " msec");
      else
	System.out.println("Time to execute " + getName() + ": " + watch.getTime() + " msec");
    }

    return result;
  }
}
